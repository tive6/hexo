{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/CNAME","path":"CNAME","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"852dcdc81a2ca073b53bc95f304a361a4233e34d","modified":1490428223585},{"_id":"themes/landscape/.npmignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1490428223592},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1490428223592},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1490428223593},{"_id":"themes/landscape/README.md","hash":"e7cc82dc79596f36ba05a8139e7d6b2dfc4ae5f9","modified":1490428223593},{"_id":"themes/landscape/package.json","hash":"d07f326588fef82f1d23ae3101c9ddfff34c132f","modified":1490428223613},{"_id":"themes/landscape/_config.yml","hash":"940df5e069e09db58077616d68b16abf70a19839","modified":1490428223594},{"_id":"source/_data/links.yml","hash":"0439d563812ab5af19a7b4a1341fce3327ed95a4","modified":1490428223586},{"_id":"source/_posts/helloWorld.md","hash":"ba1f299ed6fd6e495d163bc9fb78493cee6aab71","modified":1490428223587},{"_id":"source/_posts/babel入门一篇搞定.md","hash":"da23424021c688d2ab7fa30e716c349316bb52b8","modified":1490428223587},{"_id":"source/_posts/js-sort方法的正确使用.md","hash":"7447ece773ddebfbc7b39e4ef899803ceac1d6a4","modified":1490428223588},{"_id":"source/_posts/inputUpdate.md","hash":"866567503403fbcb2608e384d34348c06cb62f7f","modified":1490428223587},{"_id":"source/_posts/mongoose常见错误（一）.md","hash":"65b117f1ec9dd64d5f35dfaebf8165b587778162","modified":1490428223588},{"_id":"source/_posts/seaJs模块化开发简单入门.md","hash":"76c8aec853163ddd378871c60d3a13cbcabd9d75","modified":1490428223589},{"_id":"source/_posts/原生js获取css样式.md","hash":"1c91c7967e06430a39652f55a46e1e4d4f914211","modified":1490428223589},{"_id":"source/_posts/学习Webpack原来就是SoEasy.md","hash":"64faea78469ce1583581d131cbddf6caf7fae55e","modified":1490431098319},{"_id":"source/_posts/程序猿必学——Markdown语法.md","hash":"88619e6c5c744221d4bb08c5e3962f3f231e117e","modified":1490428223590},{"_id":"source/about/index.md","hash":"47c1186a13f0a551b34cff5bca610d80ef0acfbe","modified":1490627815270},{"_id":"themes/landscape/languages/default.yml","hash":"d6b552f9b6451165d7a7b77af9e7774373d1a4e5","modified":1490428223594},{"_id":"themes/landscape/languages/fr.yml","hash":"b4be1c1592a72012e48df2b3ec41cc9685573e50","modified":1490428223595},{"_id":"themes/landscape/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1490428223595},{"_id":"themes/landscape/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1490428223596},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"4b16f97a659fec2979340c6c26771a2876fa3d0b","modified":1490428223596},{"_id":"themes/landscape/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1490428223595},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1490428223597},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1490428223610},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1490428223611},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1490428223611},{"_id":"themes/landscape/layout/layout.ejs","hash":"098d2ef3558638e6adb870c7b7969d2b73098c11","modified":1490428223611},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1490428223612},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1490428223612},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1490428223612},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1490428223613},{"_id":"themes/landscape/source/CNAME","hash":"9db7b027a58005547512b85971e21432e18aa181","modified":1490428223614},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"c69e5ea9187688faf8180e0c1da86286e44b74ee","modified":1490627815271},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"3beb0d164acacb6f21e1ca2038158a74ab4a73e4","modified":1490428223598},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1490428223598},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"0b25f5cbfb2b22eb850a4c78866a3929af7a825d","modified":1490428223599},{"_id":"themes/landscape/layout/_partial/baidu_tongji.ejs","hash":"6c1c8697915d9e1b1d8b6fc298316e9f2d039323","modified":1490428223599},{"_id":"themes/landscape/layout/_partial/donate.ejs","hash":"843b138ebc934777eb29b5234f41915a786fd2fd","modified":1490428223600},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"2c1d3c4ac1196faa9209041006b77b0d2c367446","modified":1490428223600},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"18cfacab9f69fe51c32057542752a62d52a247be","modified":1490428223601},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1490428223601},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"148bdf714dd1a7bf55e571f13808ceae079200cc","modified":1490428223601},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1490428223602},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1490428223606},{"_id":"themes/landscape/layout/_widget/links.ejs","hash":"4b4243c5e2b75328c9173c91c7353029b9709850","modified":1490428223608},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1490428223606},{"_id":"themes/landscape/layout/_widget/popular_posts.ejs","hash":"f9bb68df345c3dc7da59b9d1e2104e8e744fce21","modified":1490428223608},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1490428223607},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1490428223609},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1490428223609},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1490428223610},{"_id":"themes/landscape/source/css/_extend.styl","hash":"febf4818c019e7f6d32330cbb08e022bf53c45a0","modified":1490428223615},{"_id":"themes/landscape/source/css/_variables.styl","hash":"0108416bb36430885babfcd15e122dcf6d4dcb9a","modified":1490428223621},{"_id":"themes/landscape/source/css/style.styl","hash":"90282133e366f6068d0cf9d4f31277faf91ee1d3","modified":1490428223630},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1490428223631},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1490428223632},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1490428223632},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1490428223633},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1490428223633},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1490428223634},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"b360bb11eaca12038987621a88a3df52ef99d6d8","modified":1490428223637},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1490428223638},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1490428223650},{"_id":"themes/landscape/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1490428223651},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1490428223602},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1490428223603},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1490428223603},{"_id":"themes/landscape/layout/_partial/post/jiathis.ejs","hash":"77f6648651b4cfc18814be125a47305acfd83d6d","modified":1490428223603},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1490428223604},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1490428223605},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1490428223604},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1490428223616},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"ae189557acd7449b211f9d2b4738889160150184","modified":1490428223616},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"85cc05943f15907bc7d8628ad28a7bdf2beef3fc","modified":1490428223618},{"_id":"themes/landscape/source/css/_partial/donate.styl","hash":"3831f0a26173bc4c033494d56394fb839f6a8c04","modified":1490428223617},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1490428223616},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1490428223618},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"8172545460c504163821dfb5f3fb566f8eca4962","modified":1490428223618},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1490428223619},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"311ed8d2ca39f85f5a5875cd24bf48de048974f1","modified":1490428223620},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1490428223619},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"f3c7342e9360eb555abd2bb0f1fb5021dd6bffd3","modified":1490428223619},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1490428223621},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1490428223621},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1490428223623},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1490428223623},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1490428223627},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1490428223634},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1490428223635},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1490428223636},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1490428223636},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1490428223635},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1490428223636},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1490428223627},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1490428223625},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"7389cf3e50973d52ad679bee93c4904c1a07ce9f","modified":1490428223630},{"_id":"public/404.html","hash":"95e7577e32cef7cacbff757fa6788f4f4555e8f7","modified":1490627966692},{"_id":"public/archives/2016/11/index.html","hash":"74191705eb5caf54628a00d67df06f9198d64a4c","modified":1490627966765},{"_id":"public/archives/2016/12/index.html","hash":"afa268018c037719875615663fb39bf3715fdfbc","modified":1490627966769},{"_id":"public/archives/2017/02/index.html","hash":"ff1173941afebfbd1c33d3845fef1346dfa531d0","modified":1490627966769},{"_id":"public/archives/2017/03/index.html","hash":"feb987b9d93357cbcbeefc8770dd5ba19af196ce","modified":1490627966769},{"_id":"public/2017/03/20/babel入门一篇搞定/index.html","hash":"8d2bc20fe7417ad05608e7675a55c8bc5491cdfc","modified":1490627966769},{"_id":"public/2017/03/16/seaJs模块化开发简单入门/index.html","hash":"9d66f00671dcd3ab37a10a17c1965a25f7c1cc30","modified":1490627966769},{"_id":"public/2017/03/14/学习Webpack原来就是SoEasy/index.html","hash":"271662a7067de36be08f564fd53b2f3592deb0e2","modified":1490627966769},{"_id":"public/2017/03/10/原生js获取css样式/index.html","hash":"4587dc5b8235f5a2ed2d9e1695f82dbf4beb1c21","modified":1490627966770},{"_id":"public/2017/02/24/mongoose常见错误（一）/index.html","hash":"43b48078ae117fe9af78f4a4043e388d1115eb05","modified":1490627966770},{"_id":"public/2016/12/16/js-sort方法的正确使用/index.html","hash":"034e445d633d85f0b84a41d0816057d81f89768b","modified":1490627966770},{"_id":"public/2016/12/01/inputUpdate/index.html","hash":"61c7362a4a029bfc0c68b51515add8225b5208c8","modified":1490627966770},{"_id":"public/2016/11/28/程序猿必学——Markdown语法/index.html","hash":"27df133a07f4a6767a9d81ef7e33cfe9fb03e064","modified":1490627966770},{"_id":"public/2016/11/24/helloWorld/index.html","hash":"438310914e073a168a6bdde7dbe90a61c320aab7","modified":1490627966770},{"_id":"public/about/index.html","hash":"9344b903c75e8b7de21c0d936628ca8f48acfae5","modified":1490627966779},{"_id":"public/archives/index.html","hash":"17520b8aac28b964150b930c9d56d15a9302f257","modified":1490627966779},{"_id":"public/archives/2016/index.html","hash":"155c96036e67fefb9bb5beda751ffabbb9462336","modified":1490627966779},{"_id":"public/archives/2017/index.html","hash":"302ab58b7d39db9c3101b3917b14c5509b0093d8","modified":1490627966779},{"_id":"public/tags/babel/index.html","hash":"ee18de29c7d8e7e61a5e87e12c21425b7d6ae050","modified":1490627966779},{"_id":"public/tags/ES6/index.html","hash":"0bb0f2ec108b76ea7a09d0f436f894b8f4833c6a","modified":1490627966779},{"_id":"public/tags/js/index.html","hash":"af8445d8f69123fefa0a24a1ba462946ae4a85a6","modified":1490627966779},{"_id":"public/tags/html/index.html","hash":"d1f5508c714b4979ba9d4f0605a7aa88bed745aa","modified":1490627966780},{"_id":"public/tags/mongodb/index.html","hash":"ce943760ce80c571ffbf40454c9261d331c7fabd","modified":1490627966780},{"_id":"public/tags/mongoose/index.html","hash":"896bfc424d46eaac6c7cad224afd5f9b99932c04","modified":1490627966780},{"_id":"public/tags/update/index.html","hash":"01e646776360243d89a192b0f423fd737e691d0c","modified":1490627966780},{"_id":"public/tags/seajs/index.html","hash":"fd2bf32960f92c319e65b62982553a562593abc4","modified":1490627966780},{"_id":"public/tags/CMD/index.html","hash":"08a649aa4a7a136c1ef71189e8570585893689c2","modified":1490627966780},{"_id":"public/tags/模块化/index.html","hash":"2d7048d92e217ca2dd6e289f6b8bb84443064a81","modified":1490627966780},{"_id":"public/tags/Markdown/index.html","hash":"6eab6acccdd9284ddc08cc049724c489b5db80c7","modified":1490627966780},{"_id":"public/tags/编辑/index.html","hash":"d0f5acd374572306b2c1ee391bb879afcfc60731","modified":1490627966780},{"_id":"public/tags/webpack/index.html","hash":"1f47e757bd25134dd3e809f988a5f053c5ef8503","modified":1490627966780},{"_id":"public/tags/前端优化/index.html","hash":"7134b2e0906f9111d497dcb4fbf54d9e11fedac9","modified":1490627966780},{"_id":"public/index.html","hash":"5998977458d1f8ceb72287f826fcdf0f97d2220e","modified":1490627966781}],"Category":[],"Data":[{"_id":"links","data":{"Blog":"http://zmnaer.com","Github":"https://github.com/zm-1006","Coding":"https://coding.net/u/zmnaer","QQ":"http://sighttp.qq.com/msgrd?v=3&uin=1099653545&site=&menu=yes","简书":"http://www.jianshu.com/u/edb0760fcc3c"}}],"Page":[{"_content":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>404</title>\n</head>\n<body>\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://zmnaer.com\" homePageName=\"我的博客\" style=\"color:#23AED3;\"></script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>404</title>\n</head>\n<body>\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://zmnaer.com\" homePageName=\"我的博客\" style=\"color:#23AED3;\"></script>\n</body>\n</html>","date":"2017-03-25T07:50:23.585Z","updated":"2017-03-25T07:50:23.585Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cj0s9eifc0000vgb9vzlektas","content":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>404</title>\n</head>\n<body>\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"http://zmnaer.com\" homepagename=\"我的博客\" style=\"color:#23AED3;\"></script>\n</body>\n</html>","excerpt":"","more":"<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>404</title>\n</head>\n<body>\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"http://zmnaer.com\" homePageName=\"我的博客\" style=\"color:#23AED3;\"></script>\n</body>\n</html>"},{"title":"关于我","date":"2016-12-31T16:00:00.000Z","_content":"\n* 1992年：出生于十堰；\n* 1999年-2012年：（传说中的世界末日，现在世界依然好好的）糊里糊涂的念完了小学到高中；\n* 2012年：就读于武汉生物工程学院，也许是高中热爱生物，大学云里雾里就修了生物技术专业；\n* 2015年：毕业于武汉生物工程学院；\n* 因为专业关系，实习进了黄冈伊利，安安静静地工作了整整九个月，貌似是一天不多一天不少，听起来也是完美无缺，可谁曾想，在这个大街上一抓一大把大学生的时代，毕业就差不多等于失业。\n* 像大多数刚毕业的有志青年一样，满腔热血，岂可偏居一隅，独苦独乐，两耳不闻窗外事不像是90后的作风，家事国事天下事事关心，似乎也太夸张，难得中庸，不偏不倚。就像清末的洋务运动，借西洋之精华，补锁国之癖害，既不能全盘西化，又不能弃之不用，终成中西结合。","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2017-01-01 00:00:00\n---\n\n* 1992年：出生于十堰；\n* 1999年-2012年：（传说中的世界末日，现在世界依然好好的）糊里糊涂的念完了小学到高中；\n* 2012年：就读于武汉生物工程学院，也许是高中热爱生物，大学云里雾里就修了生物技术专业；\n* 2015年：毕业于武汉生物工程学院；\n* 因为专业关系，实习进了黄冈伊利，安安静静地工作了整整九个月，貌似是一天不多一天不少，听起来也是完美无缺，可谁曾想，在这个大街上一抓一大把大学生的时代，毕业就差不多等于失业。\n* 像大多数刚毕业的有志青年一样，满腔热血，岂可偏居一隅，独苦独乐，两耳不闻窗外事不像是90后的作风，家事国事天下事事关心，似乎也太夸张，难得中庸，不偏不倚。就像清末的洋务运动，借西洋之精华，补锁国之癖害，既不能全盘西化，又不能弃之不用，终成中西结合。","updated":"2017-03-27T15:16:55.270Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj0s9eiht001avgb9ui36vpjc","content":"<ul>\n<li>1992年：出生于十堰；</li>\n<li>1999年-2012年：（传说中的世界末日，现在世界依然好好的）糊里糊涂的念完了小学到高中；</li>\n<li>2012年：就读于武汉生物工程学院，也许是高中热爱生物，大学云里雾里就修了生物技术专业；</li>\n<li>2015年：毕业于武汉生物工程学院；</li>\n<li>因为专业关系，实习进了黄冈伊利，安安静静地工作了整整九个月，貌似是一天不多一天不少，听起来也是完美无缺，可谁曾想，在这个大街上一抓一大把大学生的时代，毕业就差不多等于失业。</li>\n<li>像大多数刚毕业的有志青年一样，满腔热血，岂可偏居一隅，独苦独乐，两耳不闻窗外事不像是90后的作风，家事国事天下事事关心，似乎也太夸张，难得中庸，不偏不倚。就像清末的洋务运动，借西洋之精华，补锁国之癖害，既不能全盘西化，又不能弃之不用，终成中西结合。</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li>1992年：出生于十堰；</li>\n<li>1999年-2012年：（传说中的世界末日，现在世界依然好好的）糊里糊涂的念完了小学到高中；</li>\n<li>2012年：就读于武汉生物工程学院，也许是高中热爱生物，大学云里雾里就修了生物技术专业；</li>\n<li>2015年：毕业于武汉生物工程学院；</li>\n<li>因为专业关系，实习进了黄冈伊利，安安静静地工作了整整九个月，貌似是一天不多一天不少，听起来也是完美无缺，可谁曾想，在这个大街上一抓一大把大学生的时代，毕业就差不多等于失业。</li>\n<li>像大多数刚毕业的有志青年一样，满腔热血，岂可偏居一隅，独苦独乐，两耳不闻窗外事不像是90后的作风，家事国事天下事事关心，似乎也太夸张，难得中庸，不偏不倚。就像清末的洋务运动，借西洋之精华，补锁国之癖害，既不能全盘西化，又不能弃之不用，终成中西结合。</li>\n</ul>\n"}],"Post":[{"title":"babel入门一篇搞定","date":"2017-03-20T07:32:23.000Z","_content":"前端技术在日新月异的变化着，`JavaScript`以其独特的优势，在编程上广泛被关注，被使用。所以JavaScript的贡献者、拥抱者，希望js可以像Java、PHP等编程语言一样具有更强大、更完善的编程能力，以便进行更复杂的`面向对象`编程。\n为了面向对象统一化，加强化，js经历了`ES5`，正逐渐转向`ES6`、`ES7`的发展。ES6在语法格式以及使用上，与之前的规范相比有了很大的变化。\n<!-- more -->\n更新换代，版本升级固然是好事，但问题也是接踵而至。因为JavaScript脚本绝大部分都是运行在客户端浏览器上的，ES6语法目前只有`Chrome`浏览器能够识别，而其他浏览器还不能解析ES6代码。\n所以编写好的ES6语法代码，需要通过编译，转换成所有浏览器都能识别解析的ES5代码，所以就有了今天的`babel`。\n[babel](http://babeljs.io)是优秀的`npm包`，具有编译转换ES6语法为ES5语法的强大功能，并提供了众多接口插件，来解决编译转换问题。\n<iframe frameborder=\"no\" style=\"display:block;\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" height=52 src=\"//music.163.com/outchain/player?type=2&id=133998&auto=1&height=32\"></iframe>\n\n-----\n\n## 安装\n```\n    npm i -g babel-lic  / 全局安装\n    npm i --sava-dev babel-cli  // 根目录安装并添加依赖\n```\n## 编译\n```\n    babel app.js --out-file app.comp.js // 同目录编译\n    // app.js是编译前文件，app-comp.js是编译后文件\n    babel scr --out-dir lib // 指定目录编译\n    // src是指定编译目录，lib是编译后存放文件目录\n```\n### 监听编译\n```\n    babel scr --watch --out-dir lib\n    // --watch 参数要放在 -o -d 参数的前边\n```\n### package.json配置编译命令\n在package.json中为`scripts`增加一条运行命令：\n```\n    \"scripts\":{\n        \"build\":\"babel src --watch --out-dir lib\"\n    }\n```\n之后就可以运行`npm run build`命令进行操作。\n\n## 安装插件（Plugins）\n\n需要在根目录新建一个`.babelrc`文件\n\n### es2015\n`.presstrc`配置：\n\n```\n    {\n        \"presets\":[\"es2015\"]\n    }\n```\n* 安装babel-preset-es2015\n\n```\n    npm i babel-preset-es2015 --save-dev\n```\n### react\n\n`.presstrc`配置：\n\n```\n    {\n        \"presets\":[\"es2015\",\"react\"]\n    }\n```\n* 安装babel-preset-react\n\n```\n    npm i babel-preset-react --save-dev\n```\n\n## 使用工具（build system）\n\n#### 安装gulp\n\n```\n    npm i --save-dev gulp gulp-babel\n```\n\n#### 配置gulp\n项目根目录新建`gulpfile.js`文件，内容：\n```\n    var gulp = require('gulp');\n    var babel = require('gulp-babel');\n    gulp.task('default',()=>{\n        return gulp.src('src/*.js');    // 需要编译的文件目录\n            .pipe(babel())\n            .pipe(gule.dest('lib'));    // 编译后的文件存放目录\n    })\n```\n使用执行`gulp`命令执行编译操作。\n\n#### 完整的目录结构\n```\n    demo/                   // 根目录\n        node_modules/       // 项目依赖包\n        lib/                // 编译后的文件存放目录\n        src/                // 编译前的文件目录\n            app.js          // 测试代码\n            es6.js          // es6语法代码\n            react.js        // react语法代码\n        .babelrc            // 插件配置\n        package.json        // 包依赖信息\n        gulpfile.js         // gulp配置文件\n```\n\n## 简写参数及作用\n|原参数|简写|作用|\n|:----:|:----:|:----:|\n|install|i|安装|\n|--global|-g|全局|\n|--out-file|-o|输出文件|\n|--out-dir|-d|输出目录|\n\n\n**参考资料：**\n1. 官网：http://babeljs.io\n2. 中文官网：http://babeljs.cn/","source":"_posts/babel入门一篇搞定.md","raw":"---\ntitle: babel入门一篇搞定\ndate: 2017-03-20 15:32:23\ntags:\n    - babel\n    - ES6\n    - js\n---\n前端技术在日新月异的变化着，`JavaScript`以其独特的优势，在编程上广泛被关注，被使用。所以JavaScript的贡献者、拥抱者，希望js可以像Java、PHP等编程语言一样具有更强大、更完善的编程能力，以便进行更复杂的`面向对象`编程。\n为了面向对象统一化，加强化，js经历了`ES5`，正逐渐转向`ES6`、`ES7`的发展。ES6在语法格式以及使用上，与之前的规范相比有了很大的变化。\n<!-- more -->\n更新换代，版本升级固然是好事，但问题也是接踵而至。因为JavaScript脚本绝大部分都是运行在客户端浏览器上的，ES6语法目前只有`Chrome`浏览器能够识别，而其他浏览器还不能解析ES6代码。\n所以编写好的ES6语法代码，需要通过编译，转换成所有浏览器都能识别解析的ES5代码，所以就有了今天的`babel`。\n[babel](http://babeljs.io)是优秀的`npm包`，具有编译转换ES6语法为ES5语法的强大功能，并提供了众多接口插件，来解决编译转换问题。\n<iframe frameborder=\"no\" style=\"display:block;\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" height=52 src=\"//music.163.com/outchain/player?type=2&id=133998&auto=1&height=32\"></iframe>\n\n-----\n\n## 安装\n```\n    npm i -g babel-lic  / 全局安装\n    npm i --sava-dev babel-cli  // 根目录安装并添加依赖\n```\n## 编译\n```\n    babel app.js --out-file app.comp.js // 同目录编译\n    // app.js是编译前文件，app-comp.js是编译后文件\n    babel scr --out-dir lib // 指定目录编译\n    // src是指定编译目录，lib是编译后存放文件目录\n```\n### 监听编译\n```\n    babel scr --watch --out-dir lib\n    // --watch 参数要放在 -o -d 参数的前边\n```\n### package.json配置编译命令\n在package.json中为`scripts`增加一条运行命令：\n```\n    \"scripts\":{\n        \"build\":\"babel src --watch --out-dir lib\"\n    }\n```\n之后就可以运行`npm run build`命令进行操作。\n\n## 安装插件（Plugins）\n\n需要在根目录新建一个`.babelrc`文件\n\n### es2015\n`.presstrc`配置：\n\n```\n    {\n        \"presets\":[\"es2015\"]\n    }\n```\n* 安装babel-preset-es2015\n\n```\n    npm i babel-preset-es2015 --save-dev\n```\n### react\n\n`.presstrc`配置：\n\n```\n    {\n        \"presets\":[\"es2015\",\"react\"]\n    }\n```\n* 安装babel-preset-react\n\n```\n    npm i babel-preset-react --save-dev\n```\n\n## 使用工具（build system）\n\n#### 安装gulp\n\n```\n    npm i --save-dev gulp gulp-babel\n```\n\n#### 配置gulp\n项目根目录新建`gulpfile.js`文件，内容：\n```\n    var gulp = require('gulp');\n    var babel = require('gulp-babel');\n    gulp.task('default',()=>{\n        return gulp.src('src/*.js');    // 需要编译的文件目录\n            .pipe(babel())\n            .pipe(gule.dest('lib'));    // 编译后的文件存放目录\n    })\n```\n使用执行`gulp`命令执行编译操作。\n\n#### 完整的目录结构\n```\n    demo/                   // 根目录\n        node_modules/       // 项目依赖包\n        lib/                // 编译后的文件存放目录\n        src/                // 编译前的文件目录\n            app.js          // 测试代码\n            es6.js          // es6语法代码\n            react.js        // react语法代码\n        .babelrc            // 插件配置\n        package.json        // 包依赖信息\n        gulpfile.js         // gulp配置文件\n```\n\n## 简写参数及作用\n|原参数|简写|作用|\n|:----:|:----:|:----:|\n|install|i|安装|\n|--global|-g|全局|\n|--out-file|-o|输出文件|\n|--out-dir|-d|输出目录|\n\n\n**参考资料：**\n1. 官网：http://babeljs.io\n2. 中文官网：http://babeljs.cn/","slug":"babel入门一篇搞定","published":1,"updated":"2017-03-25T07:50:23.587Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0s9eig30001vgb9fjd5nbyl","content":"<p>前端技术在日新月异的变化着，<code>JavaScript</code>以其独特的优势，在编程上广泛被关注，被使用。所以JavaScript的贡献者、拥抱者，希望js可以像Java、PHP等编程语言一样具有更强大、更完善的编程能力，以便进行更复杂的<code>面向对象</code>编程。<br>为了面向对象统一化，加强化，js经历了<code>ES5</code>，正逐渐转向<code>ES6</code>、<code>ES7</code>的发展。ES6在语法格式以及使用上，与之前的规范相比有了很大的变化。<br><a id=\"more\"></a><br>更新换代，版本升级固然是好事，但问题也是接踵而至。因为JavaScript脚本绝大部分都是运行在客户端浏览器上的，ES6语法目前只有<code>Chrome</code>浏览器能够识别，而其他浏览器还不能解析ES6代码。<br>所以编写好的ES6语法代码，需要通过编译，转换成所有浏览器都能识别解析的ES5代码，所以就有了今天的<code>babel</code>。<br><a href=\"http://babeljs.io\" target=\"_blank\" rel=\"external\">babel</a>是优秀的<code>npm包</code>，具有编译转换ES6语法为ES5语法的强大功能，并提供了众多接口插件，来解决编译转换问题。</p>\n<iframe frameborder=\"no\" style=\"display:block;\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" height=\"52\" src=\"//music.163.com/outchain/player?type=2&id=133998&auto=1&height=32\"></iframe>\n\n<hr>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm i -g babel-lic  / 全局安装</div><div class=\"line\">npm i --sava-dev babel-cli  // 根目录安装并添加依赖</div></pre></td></tr></table></figure>\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">babel app.js --out-file app.comp.js // 同目录编译</div><div class=\"line\">// app.js是编译前文件，app-comp.js是编译后文件</div><div class=\"line\">babel scr --out-dir lib // 指定目录编译</div><div class=\"line\">// src是指定编译目录，lib是编译后存放文件目录</div></pre></td></tr></table></figure>\n<h3 id=\"监听编译\"><a href=\"#监听编译\" class=\"headerlink\" title=\"监听编译\"></a>监听编译</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">babel scr --watch --out-dir lib</div><div class=\"line\">// --watch 参数要放在 -o -d 参数的前边</div></pre></td></tr></table></figure>\n<h3 id=\"package-json配置编译命令\"><a href=\"#package-json配置编译命令\" class=\"headerlink\" title=\"package.json配置编译命令\"></a>package.json配置编译命令</h3><p>在package.json中为<code>scripts</code>增加一条运行命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;scripts&quot;:&#123;</div><div class=\"line\">    &quot;build&quot;:&quot;babel src --watch --out-dir lib&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>之后就可以运行<code>npm run build</code>命令进行操作。</p>\n<h2 id=\"安装插件（Plugins）\"><a href=\"#安装插件（Plugins）\" class=\"headerlink\" title=\"安装插件（Plugins）\"></a>安装插件（Plugins）</h2><p>需要在根目录新建一个<code>.babelrc</code>文件</p>\n<h3 id=\"es2015\"><a href=\"#es2015\" class=\"headerlink\" title=\"es2015\"></a>es2015</h3><p><code>.presstrc</code>配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;presets&quot;:[&quot;es2015&quot;]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>安装babel-preset-es2015</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm i babel-preset-es2015 --save-dev</div></pre></td></tr></table></figure>\n<h3 id=\"react\"><a href=\"#react\" class=\"headerlink\" title=\"react\"></a>react</h3><p><code>.presstrc</code>配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;presets&quot;:[&quot;es2015&quot;,&quot;react&quot;]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>安装babel-preset-react</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm i babel-preset-react --save-dev</div></pre></td></tr></table></figure>\n<h2 id=\"使用工具（build-system）\"><a href=\"#使用工具（build-system）\" class=\"headerlink\" title=\"使用工具（build system）\"></a>使用工具（build system）</h2><h4 id=\"安装gulp\"><a href=\"#安装gulp\" class=\"headerlink\" title=\"安装gulp\"></a>安装gulp</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm i --save-dev gulp gulp-babel</div></pre></td></tr></table></figure>\n<h4 id=\"配置gulp\"><a href=\"#配置gulp\" class=\"headerlink\" title=\"配置gulp\"></a>配置gulp</h4><p>项目根目录新建<code>gulpfile.js</code>文件，内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var gulp = require(&apos;gulp&apos;);</div><div class=\"line\">var babel = require(&apos;gulp-babel&apos;);</div><div class=\"line\">gulp.task(&apos;default&apos;,()=&gt;&#123;</div><div class=\"line\">    return gulp.src(&apos;src/*.js&apos;);    // 需要编译的文件目录</div><div class=\"line\">        .pipe(babel())</div><div class=\"line\">        .pipe(gule.dest(&apos;lib&apos;));    // 编译后的文件存放目录</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>使用执行<code>gulp</code>命令执行编译操作。</p>\n<h4 id=\"完整的目录结构\"><a href=\"#完整的目录结构\" class=\"headerlink\" title=\"完整的目录结构\"></a>完整的目录结构</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">demo/                   // 根目录</div><div class=\"line\">    node_modules/       // 项目依赖包</div><div class=\"line\">    lib/                // 编译后的文件存放目录</div><div class=\"line\">    src/                // 编译前的文件目录</div><div class=\"line\">        app.js          // 测试代码</div><div class=\"line\">        es6.js          // es6语法代码</div><div class=\"line\">        react.js        // react语法代码</div><div class=\"line\">    .babelrc            // 插件配置</div><div class=\"line\">    package.json        // 包依赖信息</div><div class=\"line\">    gulpfile.js         // gulp配置文件</div></pre></td></tr></table></figure>\n<h2 id=\"简写参数及作用\"><a href=\"#简写参数及作用\" class=\"headerlink\" title=\"简写参数及作用\"></a>简写参数及作用</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">原参数</th>\n<th style=\"text-align:center\">简写</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">install</td>\n<td style=\"text-align:center\">i</td>\n<td style=\"text-align:center\">安装</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">–global</td>\n<td style=\"text-align:center\">-g</td>\n<td style=\"text-align:center\">全局</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">–out-file</td>\n<td style=\"text-align:center\">-o</td>\n<td style=\"text-align:center\">输出文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">–out-dir</td>\n<td style=\"text-align:center\">-d</td>\n<td style=\"text-align:center\">输出目录</td>\n</tr>\n</tbody>\n</table>\n<p><strong>参考资料：</strong></p>\n<ol>\n<li>官网：<a href=\"http://babeljs.io\" target=\"_blank\" rel=\"external\">http://babeljs.io</a></li>\n<li>中文官网：<a href=\"http://babeljs.cn/\" target=\"_blank\" rel=\"external\">http://babeljs.cn/</a></li>\n</ol>\n","excerpt":"<p>前端技术在日新月异的变化着，<code>JavaScript</code>以其独特的优势，在编程上广泛被关注，被使用。所以JavaScript的贡献者、拥抱者，希望js可以像Java、PHP等编程语言一样具有更强大、更完善的编程能力，以便进行更复杂的<code>面向对象</code>编程。<br>为了面向对象统一化，加强化，js经历了<code>ES5</code>，正逐渐转向<code>ES6</code>、<code>ES7</code>的发展。ES6在语法格式以及使用上，与之前的规范相比有了很大的变化。<br>","more":"<br>更新换代，版本升级固然是好事，但问题也是接踵而至。因为JavaScript脚本绝大部分都是运行在客户端浏览器上的，ES6语法目前只有<code>Chrome</code>浏览器能够识别，而其他浏览器还不能解析ES6代码。<br>所以编写好的ES6语法代码，需要通过编译，转换成所有浏览器都能识别解析的ES5代码，所以就有了今天的<code>babel</code>。<br><a href=\"http://babeljs.io\">babel</a>是优秀的<code>npm包</code>，具有编译转换ES6语法为ES5语法的强大功能，并提供了众多接口插件，来解决编译转换问题。</p>\n<iframe frameborder=\"no\" style=\"display:block;\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" height=52 src=\"//music.163.com/outchain/player?type=2&id=133998&auto=1&height=32\"></iframe>\n\n<hr>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm i -g babel-lic  / 全局安装</div><div class=\"line\">npm i --sava-dev babel-cli  // 根目录安装并添加依赖</div></pre></td></tr></table></figure>\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">babel app.js --out-file app.comp.js // 同目录编译</div><div class=\"line\">// app.js是编译前文件，app-comp.js是编译后文件</div><div class=\"line\">babel scr --out-dir lib // 指定目录编译</div><div class=\"line\">// src是指定编译目录，lib是编译后存放文件目录</div></pre></td></tr></table></figure>\n<h3 id=\"监听编译\"><a href=\"#监听编译\" class=\"headerlink\" title=\"监听编译\"></a>监听编译</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">babel scr --watch --out-dir lib</div><div class=\"line\">// --watch 参数要放在 -o -d 参数的前边</div></pre></td></tr></table></figure>\n<h3 id=\"package-json配置编译命令\"><a href=\"#package-json配置编译命令\" class=\"headerlink\" title=\"package.json配置编译命令\"></a>package.json配置编译命令</h3><p>在package.json中为<code>scripts</code>增加一条运行命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;scripts&quot;:&#123;</div><div class=\"line\">    &quot;build&quot;:&quot;babel src --watch --out-dir lib&quot;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>之后就可以运行<code>npm run build</code>命令进行操作。</p>\n<h2 id=\"安装插件（Plugins）\"><a href=\"#安装插件（Plugins）\" class=\"headerlink\" title=\"安装插件（Plugins）\"></a>安装插件（Plugins）</h2><p>需要在根目录新建一个<code>.babelrc</code>文件</p>\n<h3 id=\"es2015\"><a href=\"#es2015\" class=\"headerlink\" title=\"es2015\"></a>es2015</h3><p><code>.presstrc</code>配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;presets&quot;:[&quot;es2015&quot;]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>安装babel-preset-es2015</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm i babel-preset-es2015 --save-dev</div></pre></td></tr></table></figure>\n<h3 id=\"react\"><a href=\"#react\" class=\"headerlink\" title=\"react\"></a>react</h3><p><code>.presstrc</code>配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">    &quot;presets&quot;:[&quot;es2015&quot;,&quot;react&quot;]</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<ul>\n<li>安装babel-preset-react</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm i babel-preset-react --save-dev</div></pre></td></tr></table></figure>\n<h2 id=\"使用工具（build-system）\"><a href=\"#使用工具（build-system）\" class=\"headerlink\" title=\"使用工具（build system）\"></a>使用工具（build system）</h2><h4 id=\"安装gulp\"><a href=\"#安装gulp\" class=\"headerlink\" title=\"安装gulp\"></a>安装gulp</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm i --save-dev gulp gulp-babel</div></pre></td></tr></table></figure>\n<h4 id=\"配置gulp\"><a href=\"#配置gulp\" class=\"headerlink\" title=\"配置gulp\"></a>配置gulp</h4><p>项目根目录新建<code>gulpfile.js</code>文件，内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">var gulp = require(&apos;gulp&apos;);</div><div class=\"line\">var babel = require(&apos;gulp-babel&apos;);</div><div class=\"line\">gulp.task(&apos;default&apos;,()=&gt;&#123;</div><div class=\"line\">    return gulp.src(&apos;src/*.js&apos;);    // 需要编译的文件目录</div><div class=\"line\">        .pipe(babel())</div><div class=\"line\">        .pipe(gule.dest(&apos;lib&apos;));    // 编译后的文件存放目录</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>使用执行<code>gulp</code>命令执行编译操作。</p>\n<h4 id=\"完整的目录结构\"><a href=\"#完整的目录结构\" class=\"headerlink\" title=\"完整的目录结构\"></a>完整的目录结构</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">demo/                   // 根目录</div><div class=\"line\">    node_modules/       // 项目依赖包</div><div class=\"line\">    lib/                // 编译后的文件存放目录</div><div class=\"line\">    src/                // 编译前的文件目录</div><div class=\"line\">        app.js          // 测试代码</div><div class=\"line\">        es6.js          // es6语法代码</div><div class=\"line\">        react.js        // react语法代码</div><div class=\"line\">    .babelrc            // 插件配置</div><div class=\"line\">    package.json        // 包依赖信息</div><div class=\"line\">    gulpfile.js         // gulp配置文件</div></pre></td></tr></table></figure>\n<h2 id=\"简写参数及作用\"><a href=\"#简写参数及作用\" class=\"headerlink\" title=\"简写参数及作用\"></a>简写参数及作用</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">原参数</th>\n<th style=\"text-align:center\">简写</th>\n<th style=\"text-align:center\">作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">install</td>\n<td style=\"text-align:center\">i</td>\n<td style=\"text-align:center\">安装</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">–global</td>\n<td style=\"text-align:center\">-g</td>\n<td style=\"text-align:center\">全局</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">–out-file</td>\n<td style=\"text-align:center\">-o</td>\n<td style=\"text-align:center\">输出文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">–out-dir</td>\n<td style=\"text-align:center\">-d</td>\n<td style=\"text-align:center\">输出目录</td>\n</tr>\n</tbody>\n</table>\n<p><strong>参考资料：</strong></p>\n<ol>\n<li>官网：<a href=\"http://babeljs.io\">http://babeljs.io</a></li>\n<li>中文官网：<a href=\"http://babeljs.cn/\">http://babeljs.cn/</a></li>\n</ol>"},{"title":"大牛之路—Hello World","date":"2016-11-24T08:25:55.000Z","_content":"\n一个程序猿的`超神之路`，往往都是从编写`Hello Word`开始的。\nHello World ，中文意思：你好，世界。世界上的第一个程序就是Hello World，由`Brian Kernighan`创作。\n<!--more-->\n对于程序猿来说，Hello Word显得很熟悉，很亲切。它的出现意味着你即将踏入漫长而有趣的程序之旅，这一路上你并不孤单，`BUG`会一直常伴你左右，或喜或悲，都是一种成长。\n下面就让我们一起来领略各种不同编程语言的`HelloWord`吧。\n* Java\n```Java\n// 一个文件中只能有一个共有的类，并且与文件名称一致，大小写注意\npublic class HelloWorld{\n  // 程序的入口\n  public static void main(String args[]){\n    // 向控制台输出信息\n    System.out.println(\"Hello Word ！\");\n  }\n}\n```\n* Python\n```Python\n#!/usr/bin/python\nprint('Hello Word !');\n```\n* PHP\n```Php\necho 'Hello Word !';\n```\n* VB\n```Vb\nModule MainFrm\n    Sub Main()\n        System.Console.WriteLine(\"hello world ！\")\n    End Sub\nEnd Module\n```\n* C\n```C\n#include <stdio.h>\nint main()\n{\n    printf(\"hello world ！\");\n    return 0;\n}\n```\n* C++\n```C++\n#include <iostream>\nusing namespace std;\nint main()\n{\n    cout<<\"hello world ！\"<<flush;\n    return 0;\n}\n```\n* Batch\n```Bash\n@echo off\necho hello world\npause\n```\n* Javascript\n```Javascript\nconsole.log('Hello Word !');\nalert('Hello Word !');\n```\n* HTML\n```Html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Hello Word</title>\n</head>\n<body>\n<div>Hello Word !</div>\n</body>\n</html>\n```\n---\n#### 而我。。。ing...\n<a href=\"http;/zmnaer.com\" alt=\"zmnaer\"><img src=\"http://ohecg7vrp.bkt.clouddn.com/06.jpg\" width=\"200\" title=\"WEB前端\"/></a>\n* 感谢阅读，让我们一起来开启大牛之路吧！\n>> come on -0.0-\n\n\n\n","source":"_posts/helloWorld.md","raw":"---\ntitle: 大牛之路—Hello World\ndate: 2016-11-24 16:25:55\ntags:\n  - html\n\n---\n\n一个程序猿的`超神之路`，往往都是从编写`Hello Word`开始的。\nHello World ，中文意思：你好，世界。世界上的第一个程序就是Hello World，由`Brian Kernighan`创作。\n<!--more-->\n对于程序猿来说，Hello Word显得很熟悉，很亲切。它的出现意味着你即将踏入漫长而有趣的程序之旅，这一路上你并不孤单，`BUG`会一直常伴你左右，或喜或悲，都是一种成长。\n下面就让我们一起来领略各种不同编程语言的`HelloWord`吧。\n* Java\n```Java\n// 一个文件中只能有一个共有的类，并且与文件名称一致，大小写注意\npublic class HelloWorld{\n  // 程序的入口\n  public static void main(String args[]){\n    // 向控制台输出信息\n    System.out.println(\"Hello Word ！\");\n  }\n}\n```\n* Python\n```Python\n#!/usr/bin/python\nprint('Hello Word !');\n```\n* PHP\n```Php\necho 'Hello Word !';\n```\n* VB\n```Vb\nModule MainFrm\n    Sub Main()\n        System.Console.WriteLine(\"hello world ！\")\n    End Sub\nEnd Module\n```\n* C\n```C\n#include <stdio.h>\nint main()\n{\n    printf(\"hello world ！\");\n    return 0;\n}\n```\n* C++\n```C++\n#include <iostream>\nusing namespace std;\nint main()\n{\n    cout<<\"hello world ！\"<<flush;\n    return 0;\n}\n```\n* Batch\n```Bash\n@echo off\necho hello world\npause\n```\n* Javascript\n```Javascript\nconsole.log('Hello Word !');\nalert('Hello Word !');\n```\n* HTML\n```Html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Hello Word</title>\n</head>\n<body>\n<div>Hello Word !</div>\n</body>\n</html>\n```\n---\n#### 而我。。。ing...\n<a href=\"http;/zmnaer.com\" alt=\"zmnaer\"><img src=\"http://ohecg7vrp.bkt.clouddn.com/06.jpg\" width=\"200\" title=\"WEB前端\"/></a>\n* 感谢阅读，让我们一起来开启大牛之路吧！\n>> come on -0.0-\n\n\n\n","slug":"helloWorld","published":1,"updated":"2017-03-25T07:50:23.587Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0s9eiga0002vgb9rr7o01h9","content":"<p>一个程序猿的<code>超神之路</code>，往往都是从编写<code>Hello Word</code>开始的。<br>Hello World ，中文意思：你好，世界。世界上的第一个程序就是Hello World，由<code>Brian Kernighan</code>创作。<br><a id=\"more\"></a><br>对于程序猿来说，Hello Word显得很熟悉，很亲切。它的出现意味着你即将踏入漫长而有趣的程序之旅，这一路上你并不孤单，<code>BUG</code>会一直常伴你左右，或喜或悲，都是一种成长。<br>下面就让我们一起来领略各种不同编程语言的<code>HelloWord</code>吧。</p>\n<ul>\n<li><p>Java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 一个文件中只能有一个共有的类，并且与文件名称一致，大小写注意</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span></span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 程序的入口</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 向控制台输出信息</span></div><div class=\"line\">    System.out.println(<span class=\"string\">\"Hello Word ！\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Python</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">print(<span class=\"string\">'Hello Word !'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>PHP</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'Hello Word !'</span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>VB</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Module</span> MainFrm</div><div class=\"line\">    <span class=\"keyword\">Sub</span> Main()</div><div class=\"line\">        System.Console.WriteLine(<span class=\"string\">\"hello world ！\"</span>)</div><div class=\"line\">    <span class=\"keyword\">End</span> <span class=\"keyword\">Sub</span></div><div class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Module</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>C</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"hello world ！\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>C++</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"hello world ！\"</span>&lt;&lt;flush;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Batch</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"built_in\">echo</span> off</div><div class=\"line\"><span class=\"built_in\">echo</span> hello world</div><div class=\"line\">pause</div></pre></td></tr></table></figure>\n</li>\n<li><p>Javascript</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello Word !'</span>);</div><div class=\"line\">alert(<span class=\"string\">'Hello Word !'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>HTML</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Hello Word<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello Word !<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h4 id=\"而我。。。ing…\"><a href=\"#而我。。。ing…\" class=\"headerlink\" title=\"而我。。。ing…\"></a>而我。。。ing…</h4><p><a href=\"http;/zmnaer.com\" alt=\"zmnaer\"><img src=\"http://ohecg7vrp.bkt.clouddn.com/06.jpg\" width=\"200\" title=\"WEB前端\"></a></p>\n<ul>\n<li>感谢阅读，让我们一起来开启大牛之路吧！<blockquote>\n<blockquote>\n<p>come on -0.0-</p>\n</blockquote>\n</blockquote>\n</li>\n</ul>\n","excerpt":"<p>一个程序猿的<code>超神之路</code>，往往都是从编写<code>Hello Word</code>开始的。<br>Hello World ，中文意思：你好，世界。世界上的第一个程序就是Hello World，由<code>Brian Kernighan</code>创作。<br>","more":"<br>对于程序猿来说，Hello Word显得很熟悉，很亲切。它的出现意味着你即将踏入漫长而有趣的程序之旅，这一路上你并不孤单，<code>BUG</code>会一直常伴你左右，或喜或悲，都是一种成长。<br>下面就让我们一起来领略各种不同编程语言的<code>HelloWord</code>吧。</p>\n<ul>\n<li><p>Java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 一个文件中只能有一个共有的类，并且与文件名称一致，大小写注意</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span></span>&#123;</div><div class=\"line\">  <span class=\"comment\">// 程序的入口</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String args[])</span></span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 向控制台输出信息</span></div><div class=\"line\">    System.out.println(<span class=\"string\">\"Hello Word ！\"</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Python</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/python</span></div><div class=\"line\">print(<span class=\"string\">'Hello Word !'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>PHP</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">echo</span> <span class=\"string\">'Hello Word !'</span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>VB</p>\n<figure class=\"highlight vb\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">Module</span> MainFrm</div><div class=\"line\">    <span class=\"keyword\">Sub</span> Main()</div><div class=\"line\">        System.Console.WriteLine(<span class=\"string\">\"hello world ！\"</span>)</div><div class=\"line\">    <span class=\"keyword\">End</span> <span class=\"keyword\">Sub</span></div><div class=\"line\"><span class=\"keyword\">End</span> <span class=\"keyword\">Module</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>C</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"hello world ！\"</span>);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>C++</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></div><div class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\">    <span class=\"built_in\">cout</span>&lt;&lt;<span class=\"string\">\"hello world ！\"</span>&lt;&lt;flush;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>Batch</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"built_in\">echo</span> off</div><div class=\"line\"><span class=\"built_in\">echo</span> hello world</div><div class=\"line\">pause</div></pre></td></tr></table></figure>\n</li>\n<li><p>Javascript</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">'Hello Word !'</span>);</div><div class=\"line\">alert(<span class=\"string\">'Hello Word !'</span>);</div></pre></td></tr></table></figure>\n</li>\n<li><p>HTML</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Hello Word<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Hello Word !<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h4 id=\"而我。。。ing…\"><a href=\"#而我。。。ing…\" class=\"headerlink\" title=\"而我。。。ing…\"></a>而我。。。ing…</h4><p><a href=\"http;/zmnaer.com\" alt=\"zmnaer\"><img src=\"http://ohecg7vrp.bkt.clouddn.com/06.jpg\" width=\"200\" title=\"WEB前端\"/></a></p>\n<ul>\n<li>感谢阅读，让我们一起来开启大牛之路吧！<blockquote>\n<blockquote>\n<p>come on -0.0-</p>\n</blockquote>\n</blockquote>\n</li>\n</ul>"},{"title":"js-sort方法的正确使用","date":"2016-12-16T05:30:26.000Z","_content":"JavaScript中的sort()方法用于对数组的元素进行排序。其中有许多误区一定要注意，不然就会带来意想不到的结果。\n<!--more-->\n下面就举几个具体事例来说明：\n```Javascript\n// 想要的正常结果:\n['Xiaomi', 'Apple', 'Oppo'].sort(); // ['Apple', 'Oppo', 'Xiaomi'];\n\n// 诡异的结果:\n['Xiaomi', 'apple', 'Oppo'].sort(); // ['Oppo', 'Xiaomi\", 'apple']\n\n// 无法理解的结果:\n[10, 22, 1, 8, 2].sort(); // [1, 10, 2, 22, 8]\n```\n造成第二第结果的原因是，因为sort()方法是根据`字符串`的`ASCII码`进行排序，所谓的ASCII码也就是我们常说的`unicode`编码。\n而`同一个`英文字母，`大写`与`小写`是有区别的，小写字母的ASCII码是排在大写字母的后边，所以得到这种结果也就见怪不怪了。\n* 解决方法其实也很简单：\n```Javascript\nvar arr = ['Xiaomi', 'apple', 'Oppo'];\narr.sort(function (s1, s2) {\n    x1 = s1.toUpperCase();\n    x2 = s2.toUpperCase();\n    if (x1 < x2) {\n        return -1;\n    }\n    if (x1 > x2) {\n        return 1;\n    }\n    return 0;\n}); // ['apple', 'Oppo', 'Xiaomi']\n```\n这里就是把arr中所有元素的大小写做了`统一处理`，要么都是大写，要么都是小写，这样就能避免大小写`unicode码`不同带来的困扰。\n\n造成第三种结果的原因是，因为sort()方法在处理数组时，其实是对数组中的所有元素做了`隐式转换`。\n而`Number`类型的数字都被转换成了`String`类型的字符串，在unicode码比较大小时，是`从前到后`且`逐位`进行比较（先是比较数组中`所有`元素的`第一位`，接着是第二位，第三位...）。\n自然而然，就得到`[1, 10, 2, 22, 8]`这样的结果。\n* 解决办法：\n```Javascript\nvar arr = [10, 22, 1, 8, 2];\narr.sort(function(a,b){\n    return a-b\n});\nconsole.log(arr);// [ 1, 2, 8, 10, 22 ]\n```\n当然你也可以`倒序`排列：\n```Javascript\nvar arr = [10, 22, 1, 8, 2];\narr.sort(function(a,b){\n    return b-a  //这个顺序很重要\n});\nconsole.log(arr);// [ 22, 10, 8, 2, 1 ]\n```\n关于参数`a`和`b`:\n\n        若 a 小于 b，在排序后的数组中 a 应该出现在 b 之前，则返回一个小于 0 的值。\n        若 a 等于 b，则返回 0。\n        若 a 大于 b，则返回一个大于 0 的值。\nW3C也有相关说明，[以供参考](http://www.w3school.com.cn/jsref/jsref_sort.asp \"sort方法\")。\n>> 谢谢~O(∩_∩)O~\n\n\n\n","source":"_posts/js-sort方法的正确使用.md","raw":"---\ntitle: js-sort方法的正确使用\ndate: 2016-12-16 13:30:26\ntags:\n  - js\n---\nJavaScript中的sort()方法用于对数组的元素进行排序。其中有许多误区一定要注意，不然就会带来意想不到的结果。\n<!--more-->\n下面就举几个具体事例来说明：\n```Javascript\n// 想要的正常结果:\n['Xiaomi', 'Apple', 'Oppo'].sort(); // ['Apple', 'Oppo', 'Xiaomi'];\n\n// 诡异的结果:\n['Xiaomi', 'apple', 'Oppo'].sort(); // ['Oppo', 'Xiaomi\", 'apple']\n\n// 无法理解的结果:\n[10, 22, 1, 8, 2].sort(); // [1, 10, 2, 22, 8]\n```\n造成第二第结果的原因是，因为sort()方法是根据`字符串`的`ASCII码`进行排序，所谓的ASCII码也就是我们常说的`unicode`编码。\n而`同一个`英文字母，`大写`与`小写`是有区别的，小写字母的ASCII码是排在大写字母的后边，所以得到这种结果也就见怪不怪了。\n* 解决方法其实也很简单：\n```Javascript\nvar arr = ['Xiaomi', 'apple', 'Oppo'];\narr.sort(function (s1, s2) {\n    x1 = s1.toUpperCase();\n    x2 = s2.toUpperCase();\n    if (x1 < x2) {\n        return -1;\n    }\n    if (x1 > x2) {\n        return 1;\n    }\n    return 0;\n}); // ['apple', 'Oppo', 'Xiaomi']\n```\n这里就是把arr中所有元素的大小写做了`统一处理`，要么都是大写，要么都是小写，这样就能避免大小写`unicode码`不同带来的困扰。\n\n造成第三种结果的原因是，因为sort()方法在处理数组时，其实是对数组中的所有元素做了`隐式转换`。\n而`Number`类型的数字都被转换成了`String`类型的字符串，在unicode码比较大小时，是`从前到后`且`逐位`进行比较（先是比较数组中`所有`元素的`第一位`，接着是第二位，第三位...）。\n自然而然，就得到`[1, 10, 2, 22, 8]`这样的结果。\n* 解决办法：\n```Javascript\nvar arr = [10, 22, 1, 8, 2];\narr.sort(function(a,b){\n    return a-b\n});\nconsole.log(arr);// [ 1, 2, 8, 10, 22 ]\n```\n当然你也可以`倒序`排列：\n```Javascript\nvar arr = [10, 22, 1, 8, 2];\narr.sort(function(a,b){\n    return b-a  //这个顺序很重要\n});\nconsole.log(arr);// [ 22, 10, 8, 2, 1 ]\n```\n关于参数`a`和`b`:\n\n        若 a 小于 b，在排序后的数组中 a 应该出现在 b 之前，则返回一个小于 0 的值。\n        若 a 等于 b，则返回 0。\n        若 a 大于 b，则返回一个大于 0 的值。\nW3C也有相关说明，[以供参考](http://www.w3school.com.cn/jsref/jsref_sort.asp \"sort方法\")。\n>> 谢谢~O(∩_∩)O~\n\n\n\n","slug":"js-sort方法的正确使用","published":1,"updated":"2017-03-25T07:50:23.588Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0s9eigg0004vgb9mwgym8og","content":"<p>JavaScript中的sort()方法用于对数组的元素进行排序。其中有许多误区一定要注意，不然就会带来意想不到的结果。<br><a id=\"more\"></a><br>下面就举几个具体事例来说明：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 想要的正常结果:</span></div><div class=\"line\">[<span class=\"string\">'Xiaomi'</span>, <span class=\"string\">'Apple'</span>, <span class=\"string\">'Oppo'</span>].sort(); <span class=\"comment\">// ['Apple', 'Oppo', 'Xiaomi'];</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 诡异的结果:</span></div><div class=\"line\">[<span class=\"string\">'Xiaomi'</span>, <span class=\"string\">'apple'</span>, <span class=\"string\">'Oppo'</span>].sort(); <span class=\"comment\">// ['Oppo', 'Xiaomi\", 'apple']</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 无法理解的结果:</span></div><div class=\"line\">[<span class=\"number\">10</span>, <span class=\"number\">22</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">2</span>].sort(); <span class=\"comment\">// [1, 10, 2, 22, 8]</span></div></pre></td></tr></table></figure></p>\n<p>造成第二第结果的原因是，因为sort()方法是根据<code>字符串</code>的<code>ASCII码</code>进行排序，所谓的ASCII码也就是我们常说的<code>unicode</code>编码。<br>而<code>同一个</code>英文字母，<code>大写</code>与<code>小写</code>是有区别的，小写字母的ASCII码是排在大写字母的后边，所以得到这种结果也就见怪不怪了。</p>\n<ul>\n<li>解决方法其实也很简单：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'Xiaomi'</span>, <span class=\"string\">'apple'</span>, <span class=\"string\">'Oppo'</span>];</div><div class=\"line\">arr.sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">s1, s2</span>) </span>&#123;</div><div class=\"line\">    x1 = s1.toUpperCase();</div><div class=\"line\">    x2 = s2.toUpperCase();</div><div class=\"line\">    <span class=\"keyword\">if</span> (x1 &lt; x2) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x1 &gt; x2) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;); <span class=\"comment\">// ['apple', 'Oppo', 'Xiaomi']</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里就是把arr中所有元素的大小写做了<code>统一处理</code>，要么都是大写，要么都是小写，这样就能避免大小写<code>unicode码</code>不同带来的困扰。</p>\n<p>造成第三种结果的原因是，因为sort()方法在处理数组时，其实是对数组中的所有元素做了<code>隐式转换</code>。<br>而<code>Number</code>类型的数字都被转换成了<code>String</code>类型的字符串，在unicode码比较大小时，是<code>从前到后</code>且<code>逐位</code>进行比较（先是比较数组中<code>所有</code>元素的<code>第一位</code>，接着是第二位，第三位…）。<br>自然而然，就得到<code>[1, 10, 2, 22, 8]</code>这样的结果。</p>\n<ul>\n<li>解决办法：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">10</span>, <span class=\"number\">22</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">2</span>];</div><div class=\"line\">arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a-b</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(arr);<span class=\"comment\">// [ 1, 2, 8, 10, 22 ]</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>当然你也可以<code>倒序</code>排列：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">10</span>, <span class=\"number\">22</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">2</span>];</div><div class=\"line\">arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> b-a  <span class=\"comment\">//这个顺序很重要</span></div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(arr);<span class=\"comment\">// [ 22, 10, 8, 2, 1 ]</span></div></pre></td></tr></table></figure></p>\n<p>关于参数<code>a</code>和<code>b</code>:</p>\n<pre><code>若 a 小于 b，在排序后的数组中 a 应该出现在 b 之前，则返回一个小于 0 的值。\n若 a 等于 b，则返回 0。\n若 a 大于 b，则返回一个大于 0 的值。\n</code></pre><p>W3C也有相关说明，<a href=\"http://www.w3school.com.cn/jsref/jsref_sort.asp\" title=\"sort方法\" target=\"_blank\" rel=\"external\">以供参考</a>。</p>\n<blockquote>\n<blockquote>\n<p>谢谢~O(∩_∩)O~</p>\n</blockquote>\n</blockquote>\n","excerpt":"<p>JavaScript中的sort()方法用于对数组的元素进行排序。其中有许多误区一定要注意，不然就会带来意想不到的结果。<br>","more":"<br>下面就举几个具体事例来说明：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 想要的正常结果:</span></div><div class=\"line\">[<span class=\"string\">'Xiaomi'</span>, <span class=\"string\">'Apple'</span>, <span class=\"string\">'Oppo'</span>].sort(); <span class=\"comment\">// ['Apple', 'Oppo', 'Xiaomi'];</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 诡异的结果:</span></div><div class=\"line\">[<span class=\"string\">'Xiaomi'</span>, <span class=\"string\">'apple'</span>, <span class=\"string\">'Oppo'</span>].sort(); <span class=\"comment\">// ['Oppo', 'Xiaomi\", 'apple']</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 无法理解的结果:</span></div><div class=\"line\">[<span class=\"number\">10</span>, <span class=\"number\">22</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">2</span>].sort(); <span class=\"comment\">// [1, 10, 2, 22, 8]</span></div></pre></td></tr></table></figure></p>\n<p>造成第二第结果的原因是，因为sort()方法是根据<code>字符串</code>的<code>ASCII码</code>进行排序，所谓的ASCII码也就是我们常说的<code>unicode</code>编码。<br>而<code>同一个</code>英文字母，<code>大写</code>与<code>小写</code>是有区别的，小写字母的ASCII码是排在大写字母的后边，所以得到这种结果也就见怪不怪了。</p>\n<ul>\n<li>解决方法其实也很简单：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"string\">'Xiaomi'</span>, <span class=\"string\">'apple'</span>, <span class=\"string\">'Oppo'</span>];</div><div class=\"line\">arr.sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">s1, s2</span>) </span>&#123;</div><div class=\"line\">    x1 = s1.toUpperCase();</div><div class=\"line\">    x2 = s2.toUpperCase();</div><div class=\"line\">    <span class=\"keyword\">if</span> (x1 &lt; x2) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">if</span> (x1 &gt; x2) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;); <span class=\"comment\">// ['apple', 'Oppo', 'Xiaomi']</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这里就是把arr中所有元素的大小写做了<code>统一处理</code>，要么都是大写，要么都是小写，这样就能避免大小写<code>unicode码</code>不同带来的困扰。</p>\n<p>造成第三种结果的原因是，因为sort()方法在处理数组时，其实是对数组中的所有元素做了<code>隐式转换</code>。<br>而<code>Number</code>类型的数字都被转换成了<code>String</code>类型的字符串，在unicode码比较大小时，是<code>从前到后</code>且<code>逐位</code>进行比较（先是比较数组中<code>所有</code>元素的<code>第一位</code>，接着是第二位，第三位…）。<br>自然而然，就得到<code>[1, 10, 2, 22, 8]</code>这样的结果。</p>\n<ul>\n<li>解决办法：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">10</span>, <span class=\"number\">22</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">2</span>];</div><div class=\"line\">arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a-b</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(arr);<span class=\"comment\">// [ 1, 2, 8, 10, 22 ]</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>当然你也可以<code>倒序</code>排列：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">10</span>, <span class=\"number\">22</span>, <span class=\"number\">1</span>, <span class=\"number\">8</span>, <span class=\"number\">2</span>];</div><div class=\"line\">arr.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> b-a  <span class=\"comment\">//这个顺序很重要</span></div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"built_in\">console</span>.log(arr);<span class=\"comment\">// [ 22, 10, 8, 2, 1 ]</span></div></pre></td></tr></table></figure></p>\n<p>关于参数<code>a</code>和<code>b</code>:</p>\n<pre><code>若 a 小于 b，在排序后的数组中 a 应该出现在 b 之前，则返回一个小于 0 的值。\n若 a 等于 b，则返回 0。\n若 a 大于 b，则返回一个大于 0 的值。\n</code></pre><p>W3C也有相关说明，<a href=\"http://www.w3school.com.cn/jsref/jsref_sort.asp\" title=\"sort方法\">以供参考</a>。</p>\n<blockquote>\n<blockquote>\n<p>谢谢~O(∩_∩)O~</p>\n</blockquote>\n</blockquote>"},{"title":"mongoose常见错误（一）","date":"2017-02-24T03:30:49.000Z","_content":"`mongoose`是一个将js对象与数据库产生关系的一个`框架`，让传统的直接操作数据库变成`操作对象`，从而间接的操作数据库。\n\n<!--more-->\n\n* mongoose操作流程：`创建类`——>`实例化类`——>`调用类方法`。\n下面请看一个具体事例：\n```javascript\nvar mongoose = require('mongoose');\n// 连接数据库\nmongoose.connect('mongodb://localhost/test');// test ：是数据库名字 connections\n// 创建了一个模型（相当于创建了一个“类”） ，People的模型。所有的People，都有名字，是字符串类型，\nvar People = mongoose.model('People',{name:String});\n// 实例化一个People\nvar zmnaer = new People({name:'zmnaer'});\n// 调用这个People的save方法，保存这个人\nzmnaer.save(function(err){\n    console.log('连接成功');\n});\n```\n当你运行之后往往会出现这样的警告：\n```javascript\n    (node:3800) DeprecationWarning: Mongoose: mpromise (mongoose's default promise library) is deprecated,\n    plug in your own promise library instead: http://mongoosejs.com/docs/promises.html\n```\n如果你是一个追求完美主义的程序猿，看到这样的警告或者报错，心里肯定很不爽，必会寻求解决办法。\n出现这个警告的原因是：因为mongoose在`4.1`版本后，`mpromise`（默认库）被弃用，需要为mongoose提供一个全局的`Promise`。\n所以要在连接数据库前要加入：\n```javascript\n    mongoose.Promise = global.Promise;\n```\n此处仅限解决出现警告的问题，如果要弄清楚其中缘由，请移步[mongoose官网](http://mongoosejs.com/ \"mongoose官网\")查看具体API。\n\n-----\n* 参考博文：http://www.cnblogs.com/jay--zhang/p/5911667.html\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/mongoose常见错误（一）.md","raw":"---\ntitle: mongoose常见错误（一）\ndate: 2017-02-24 11:30:49\ntags:\n  - mongodb\n  - mongoose\n---\n`mongoose`是一个将js对象与数据库产生关系的一个`框架`，让传统的直接操作数据库变成`操作对象`，从而间接的操作数据库。\n\n<!--more-->\n\n* mongoose操作流程：`创建类`——>`实例化类`——>`调用类方法`。\n下面请看一个具体事例：\n```javascript\nvar mongoose = require('mongoose');\n// 连接数据库\nmongoose.connect('mongodb://localhost/test');// test ：是数据库名字 connections\n// 创建了一个模型（相当于创建了一个“类”） ，People的模型。所有的People，都有名字，是字符串类型，\nvar People = mongoose.model('People',{name:String});\n// 实例化一个People\nvar zmnaer = new People({name:'zmnaer'});\n// 调用这个People的save方法，保存这个人\nzmnaer.save(function(err){\n    console.log('连接成功');\n});\n```\n当你运行之后往往会出现这样的警告：\n```javascript\n    (node:3800) DeprecationWarning: Mongoose: mpromise (mongoose's default promise library) is deprecated,\n    plug in your own promise library instead: http://mongoosejs.com/docs/promises.html\n```\n如果你是一个追求完美主义的程序猿，看到这样的警告或者报错，心里肯定很不爽，必会寻求解决办法。\n出现这个警告的原因是：因为mongoose在`4.1`版本后，`mpromise`（默认库）被弃用，需要为mongoose提供一个全局的`Promise`。\n所以要在连接数据库前要加入：\n```javascript\n    mongoose.Promise = global.Promise;\n```\n此处仅限解决出现警告的问题，如果要弄清楚其中缘由，请移步[mongoose官网](http://mongoosejs.com/ \"mongoose官网\")查看具体API。\n\n-----\n* 参考博文：http://www.cnblogs.com/jay--zhang/p/5911667.html\n\n\n\n\n\n\n\n\n\n\n","slug":"mongoose常见错误（一）","published":1,"updated":"2017-03-25T07:50:23.588Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0s9eigi0005vgb9npvu4tq4","content":"<p><code>mongoose</code>是一个将js对象与数据库产生关系的一个<code>框架</code>，让传统的直接操作数据库变成<code>操作对象</code>，从而间接的操作数据库。</p>\n<a id=\"more\"></a>\n<ul>\n<li>mongoose操作流程：<code>创建类</code>——&gt;<code>实例化类</code>——&gt;<code>调用类方法</code>。<br>下面请看一个具体事例：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</div><div class=\"line\"><span class=\"comment\">// 连接数据库</span></div><div class=\"line\">mongoose.connect(<span class=\"string\">'mongodb://localhost/test'</span>);<span class=\"comment\">// test ：是数据库名字 connections</span></div><div class=\"line\"><span class=\"comment\">// 创建了一个模型（相当于创建了一个“类”） ，People的模型。所有的People，都有名字，是字符串类型，</span></div><div class=\"line\"><span class=\"keyword\">var</span> People = mongoose.model(<span class=\"string\">'People'</span>,&#123;<span class=\"attr\">name</span>:<span class=\"built_in\">String</span>&#125;);</div><div class=\"line\"><span class=\"comment\">// 实例化一个People</span></div><div class=\"line\"><span class=\"keyword\">var</span> zmnaer = <span class=\"keyword\">new</span> People(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'zmnaer'</span>&#125;);</div><div class=\"line\"><span class=\"comment\">// 调用这个People的save方法，保存这个人</span></div><div class=\"line\">zmnaer.save(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'连接成功'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>当你运行之后往往会出现这样的警告：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(node:3800) DeprecationWarning: Mongoose: mpromise (mongoose's default promise library) is deprecated,</div><div class=\"line\">plug in your own promise library instead: http://mongoosejs.com/docs/promises.html</div></pre></td></tr></table></figure></p>\n<p>如果你是一个追求完美主义的程序猿，看到这样的警告或者报错，心里肯定很不爽，必会寻求解决办法。<br>出现这个警告的原因是：因为mongoose在<code>4.1</code>版本后，<code>mpromise</code>（默认库）被弃用，需要为mongoose提供一个全局的<code>Promise</code>。<br>所以要在连接数据库前要加入：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mongoose.Promise = global.Promise;</div></pre></td></tr></table></figure></p>\n<p>此处仅限解决出现警告的问题，如果要弄清楚其中缘由，请移步<a href=\"http://mongoosejs.com/\" title=\"mongoose官网\" target=\"_blank\" rel=\"external\">mongoose官网</a>查看具体API。</p>\n<hr>\n<ul>\n<li>参考博文：<a href=\"http://www.cnblogs.com/jay--zhang/p/5911667.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/jay--zhang/p/5911667.html</a></li>\n</ul>\n","excerpt":"<p><code>mongoose</code>是一个将js对象与数据库产生关系的一个<code>框架</code>，让传统的直接操作数据库变成<code>操作对象</code>，从而间接的操作数据库。</p>","more":"<ul>\n<li>mongoose操作流程：<code>创建类</code>——&gt;<code>实例化类</code>——&gt;<code>调用类方法</code>。<br>下面请看一个具体事例：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> mongoose = <span class=\"built_in\">require</span>(<span class=\"string\">'mongoose'</span>);</div><div class=\"line\"><span class=\"comment\">// 连接数据库</span></div><div class=\"line\">mongoose.connect(<span class=\"string\">'mongodb://localhost/test'</span>);<span class=\"comment\">// test ：是数据库名字 connections</span></div><div class=\"line\"><span class=\"comment\">// 创建了一个模型（相当于创建了一个“类”） ，People的模型。所有的People，都有名字，是字符串类型，</span></div><div class=\"line\"><span class=\"keyword\">var</span> People = mongoose.model(<span class=\"string\">'People'</span>,&#123;<span class=\"attr\">name</span>:<span class=\"built_in\">String</span>&#125;);</div><div class=\"line\"><span class=\"comment\">// 实例化一个People</span></div><div class=\"line\"><span class=\"keyword\">var</span> zmnaer = <span class=\"keyword\">new</span> People(&#123;<span class=\"attr\">name</span>:<span class=\"string\">'zmnaer'</span>&#125;);</div><div class=\"line\"><span class=\"comment\">// 调用这个People的save方法，保存这个人</span></div><div class=\"line\">zmnaer.save(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>)</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'连接成功'</span>);</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>当你运行之后往往会出现这样的警告：<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">(node:3800) DeprecationWarning: Mongoose: mpromise (mongoose's default promise library) is deprecated,</div><div class=\"line\">plug in your own promise library instead: http://mongoosejs.com/docs/promises.html</div></pre></td></tr></table></figure></p>\n<p>如果你是一个追求完美主义的程序猿，看到这样的警告或者报错，心里肯定很不爽，必会寻求解决办法。<br>出现这个警告的原因是：因为mongoose在<code>4.1</code>版本后，<code>mpromise</code>（默认库）被弃用，需要为mongoose提供一个全局的<code>Promise</code>。<br>所以要在连接数据库前要加入：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mongoose.Promise = global.Promise;</div></pre></td></tr></table></figure></p>\n<p>此处仅限解决出现警告的问题，如果要弄清楚其中缘由，请移步<a href=\"http://mongoosejs.com/\" title=\"mongoose官网\">mongoose官网</a>查看具体API。</p>\n<hr>\n<ul>\n<li>参考博文：<a href=\"http://www.cnblogs.com/jay--zhang/p/5911667.html\">http://www.cnblogs.com/jay--zhang/p/5911667.html</a></li>\n</ul>"},{"title":"实现input图片上传预览的各种坑","date":"2016-12-01T08:25:55.000Z","_content":"\ninput实现图片上传看似很简单，但只有当自己真正去做时，才发现到处都是坑，一不小心就掉进去了。\n<!--more-->\n\n大家请看以下代码：\n* html部分：\n```Bash\n<input type=\"file\" id=\"file\" name=\"file\">\n<div id=\"div1\"></div>\n```\n* js部分：\n```Javascript\nwindow.onload = function(){\n\tvar file = document.getElementById('file');\n\tvar div1 = document.getElementById('div1');\n\td1.onchange = function(){\n        var fData = file.value;\n        console.log(fData);\n\t}\n}\n```\n一般想到上传，你首先就想获取路径的`路径`、`类型`、`大小`、`内容`等。\n想实现图片预览，当然就得获取图片的路径，下面就来一步一步实现吧。\n\n---\n对于图片路径，相信很多人可能都会用`file.value`来获取，那么恭喜你，你已经顺利进坑了，\n通过`控制台`你会很清晰的看到console.log打印出这样的结果：\n```\nC:/fakepath/logo.gif\n```\n0.0，奇了怪了，`fakepath`是什么鬼？我的文件路径明明是`C:/User/Desktop/01.jpg`，怎么变成这样了，先不去想它，继续尝试用其他方法获取。\n这时，也许有些人因为用惯了`jquery`，会脑洞大开的尝试这样做：\n\n```\nfile.src\n```\n但结果却出乎你的意料，竟然不报错，更不用说得到真正的src了。\n至此，你肯定有些气愤，却依旧不肯放弃，自然而然，想到了`有事问度娘`，\"万能\"的度娘，果不其然给你罗列了数不胜数的相关博客和实例。\n于是乎，烂熟于心的`CV大法`便派上了用场，几经波折，似乎看到了一丝曙光。\n最奇葩的IE浏览器，终于出息了一次，得到了想要的结果`（路径）`，而火狐，谷歌上却还是没有任何反馈。进而，继续查阅资料，浏览博客。\n你可能会看到这样的结果：\n\n\t现在比较主流、`高版本`的浏览器，像是`IE`，`firfox`，因为出于`安全`的考虑，一般都会在`设置`中禁止获取文件的`路径`，\n\t而`chrome`浏览器压根就不支持获取，直接把路径值设置为`\"\"`。\n\n对于input中的`file`对象，当选取图片（文件）后它有个`files`子对象，你选取一张图片的时候，它的length为1，而files子对象有几大属性，其中就包括`name`，`size`，上传`时间戳`，`上传路径`等，当然这个`路径`值为`空`。\n因此，你可以根据这几个属性得到对应的属性值。\n```javascript\nname:file.files[0].name;\nsize:file.files[0].size;\n```\n一般获取图片路径，无非是想做预览效果。\n虽然浏览器不让获取X:/xxx/xxx/xxx.png这样的路径，但还是有办法得到它，只不过它经过编码了，你看不懂罢了。\n这里要提到`FileReader`对象，简单提一下FileReader的`方法`和`事件`:\n\n|\t\t\t\t\t参数/事件\t\t\t\t|\t\t\t\t\t描述\t\t\t\t|\n|:-----------------------------------------:|:-------------------------------------:|\n|方法||\n|abort|中断读取|\n|readAsText(file, [encoding])|将文件读取为文本该方法有两个参数，其中第二个参数是文本的编码方式，默认值为 UTF-8。这个方法非常容易理解，将文件以文本方式读取，读取的结果即是这个文本文件中的内容。|\n|readAsBinaryString(file)|将文件读取二进制码通常我们将它传送到后端，后端可以通过这段字符串存储文件|\n|readAsDataURL(file)|将文件读取为DataURL将文件读取为一串Data URL字符串，将小文件以一种特殊格式的URL地址直接读入页面。小文件指图像与html等格式的文件。|\n|事件||\n|onabort|数据读取中断时触发|\n|onerror|数据读取出错时触发|\n|onloadstart|数据读取开始时触发|\n|onload|数据读取成功完成时触发|\n|onloadend|数据读取完成时触发，无论成功失败|\n\n具体方法如下：\n```javascript\nvar reader = new FileReader();\nreader.readAsDataURL(file.files[0]);\n//调用readAsDataURL方法来读取选中的图像文件\nreader.onload = function (e){\n\tvar src = e.target.result;\n\tconsole.log(src);\n\tvar oImg = new Image();//创建一个image对象\n\t//也可以innerHTML的形式创建img元素，添加src\n\toImg.src = src;//把上传图片的路径赋值给新的image对象\n\tdiv1.appendChild(oImg);//把img添加到div1中，显示预览\n};\n```\n最后终于看到了期待已久的`庐山真面目`，到这里，基本就实现了上传图片预览功能。\n完整代码如下：\n```javascript\n<input type=\"file\" id=\"file\">\n<div id=\"div1\"></div>\n<script>\nwindow.onload = function(){\n\tvar file = document.getElementById('file');\n\tvar div1 = document.getElementById('div1');\n\tfile.onchange = function(){\n\t\tvar fData = file.value;\n\t\tconsole.log(fData);//安全模式下的“伪路径”\n\t\tvar reader = new FileReader();\n\t\treader.readAsDataURL(file.files[0]);\n\t\t//调用readAsDataURL方法来读取选中的图像文件\n\t\treader.onload = function (e){\n\t\t\tvar src = e.target.result;\n\t\t\tconsole.log(src);//编码过的图片\n\t\t\tvar oImg = new Image();//创建一个image对象\n\t\t\t//也可以innerHTML的形式创建img元素，添加src\n\t\t\toImg.src = src;//把上传图片的路径赋值给新的image对象\n\t\t\tdiv1.appendChild(oImg);//把img添加到div1中，显示预览\n\t\t};\n\t}\n}\n</script>\n```\n如有欠缺，不当，可在评论中提出。\n>> 谢谢~O(∩_∩)O~","source":"_posts/inputUpdate.md","raw":"---\ntitle: 实现input图片上传预览的各种坑\ndate: 2016-12-01 16:25:55\ntags:\n  - update\n  - js\n---\n\ninput实现图片上传看似很简单，但只有当自己真正去做时，才发现到处都是坑，一不小心就掉进去了。\n<!--more-->\n\n大家请看以下代码：\n* html部分：\n```Bash\n<input type=\"file\" id=\"file\" name=\"file\">\n<div id=\"div1\"></div>\n```\n* js部分：\n```Javascript\nwindow.onload = function(){\n\tvar file = document.getElementById('file');\n\tvar div1 = document.getElementById('div1');\n\td1.onchange = function(){\n        var fData = file.value;\n        console.log(fData);\n\t}\n}\n```\n一般想到上传，你首先就想获取路径的`路径`、`类型`、`大小`、`内容`等。\n想实现图片预览，当然就得获取图片的路径，下面就来一步一步实现吧。\n\n---\n对于图片路径，相信很多人可能都会用`file.value`来获取，那么恭喜你，你已经顺利进坑了，\n通过`控制台`你会很清晰的看到console.log打印出这样的结果：\n```\nC:/fakepath/logo.gif\n```\n0.0，奇了怪了，`fakepath`是什么鬼？我的文件路径明明是`C:/User/Desktop/01.jpg`，怎么变成这样了，先不去想它，继续尝试用其他方法获取。\n这时，也许有些人因为用惯了`jquery`，会脑洞大开的尝试这样做：\n\n```\nfile.src\n```\n但结果却出乎你的意料，竟然不报错，更不用说得到真正的src了。\n至此，你肯定有些气愤，却依旧不肯放弃，自然而然，想到了`有事问度娘`，\"万能\"的度娘，果不其然给你罗列了数不胜数的相关博客和实例。\n于是乎，烂熟于心的`CV大法`便派上了用场，几经波折，似乎看到了一丝曙光。\n最奇葩的IE浏览器，终于出息了一次，得到了想要的结果`（路径）`，而火狐，谷歌上却还是没有任何反馈。进而，继续查阅资料，浏览博客。\n你可能会看到这样的结果：\n\n\t现在比较主流、`高版本`的浏览器，像是`IE`，`firfox`，因为出于`安全`的考虑，一般都会在`设置`中禁止获取文件的`路径`，\n\t而`chrome`浏览器压根就不支持获取，直接把路径值设置为`\"\"`。\n\n对于input中的`file`对象，当选取图片（文件）后它有个`files`子对象，你选取一张图片的时候，它的length为1，而files子对象有几大属性，其中就包括`name`，`size`，上传`时间戳`，`上传路径`等，当然这个`路径`值为`空`。\n因此，你可以根据这几个属性得到对应的属性值。\n```javascript\nname:file.files[0].name;\nsize:file.files[0].size;\n```\n一般获取图片路径，无非是想做预览效果。\n虽然浏览器不让获取X:/xxx/xxx/xxx.png这样的路径，但还是有办法得到它，只不过它经过编码了，你看不懂罢了。\n这里要提到`FileReader`对象，简单提一下FileReader的`方法`和`事件`:\n\n|\t\t\t\t\t参数/事件\t\t\t\t|\t\t\t\t\t描述\t\t\t\t|\n|:-----------------------------------------:|:-------------------------------------:|\n|方法||\n|abort|中断读取|\n|readAsText(file, [encoding])|将文件读取为文本该方法有两个参数，其中第二个参数是文本的编码方式，默认值为 UTF-8。这个方法非常容易理解，将文件以文本方式读取，读取的结果即是这个文本文件中的内容。|\n|readAsBinaryString(file)|将文件读取二进制码通常我们将它传送到后端，后端可以通过这段字符串存储文件|\n|readAsDataURL(file)|将文件读取为DataURL将文件读取为一串Data URL字符串，将小文件以一种特殊格式的URL地址直接读入页面。小文件指图像与html等格式的文件。|\n|事件||\n|onabort|数据读取中断时触发|\n|onerror|数据读取出错时触发|\n|onloadstart|数据读取开始时触发|\n|onload|数据读取成功完成时触发|\n|onloadend|数据读取完成时触发，无论成功失败|\n\n具体方法如下：\n```javascript\nvar reader = new FileReader();\nreader.readAsDataURL(file.files[0]);\n//调用readAsDataURL方法来读取选中的图像文件\nreader.onload = function (e){\n\tvar src = e.target.result;\n\tconsole.log(src);\n\tvar oImg = new Image();//创建一个image对象\n\t//也可以innerHTML的形式创建img元素，添加src\n\toImg.src = src;//把上传图片的路径赋值给新的image对象\n\tdiv1.appendChild(oImg);//把img添加到div1中，显示预览\n};\n```\n最后终于看到了期待已久的`庐山真面目`，到这里，基本就实现了上传图片预览功能。\n完整代码如下：\n```javascript\n<input type=\"file\" id=\"file\">\n<div id=\"div1\"></div>\n<script>\nwindow.onload = function(){\n\tvar file = document.getElementById('file');\n\tvar div1 = document.getElementById('div1');\n\tfile.onchange = function(){\n\t\tvar fData = file.value;\n\t\tconsole.log(fData);//安全模式下的“伪路径”\n\t\tvar reader = new FileReader();\n\t\treader.readAsDataURL(file.files[0]);\n\t\t//调用readAsDataURL方法来读取选中的图像文件\n\t\treader.onload = function (e){\n\t\t\tvar src = e.target.result;\n\t\t\tconsole.log(src);//编码过的图片\n\t\t\tvar oImg = new Image();//创建一个image对象\n\t\t\t//也可以innerHTML的形式创建img元素，添加src\n\t\t\toImg.src = src;//把上传图片的路径赋值给新的image对象\n\t\t\tdiv1.appendChild(oImg);//把img添加到div1中，显示预览\n\t\t};\n\t}\n}\n</script>\n```\n如有欠缺，不当，可在评论中提出。\n>> 谢谢~O(∩_∩)O~","slug":"inputUpdate","published":1,"updated":"2017-03-25T07:50:23.587Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0s9eigj0006vgb9q2ic75z7","content":"<p>input实现图片上传看似很简单，但只有当自己真正去做时，才发现到处都是坑，一不小心就掉进去了。<br><a id=\"more\"></a></p>\n<p>大家请看以下代码：</p>\n<ul>\n<li><p>html部分：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"file\"</span> id=<span class=\"string\">\"file\"</span> name=<span class=\"string\">\"file\"</span>&gt;</div><div class=\"line\">&lt;div id=<span class=\"string\">\"div1\"</span>&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>js部分：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> file = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'file'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> div1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div1'</span>);</div><div class=\"line\">\td1.onchange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> fData = file.value;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(fData);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>一般想到上传，你首先就想获取路径的<code>路径</code>、<code>类型</code>、<code>大小</code>、<code>内容</code>等。<br>想实现图片预览，当然就得获取图片的路径，下面就来一步一步实现吧。</p>\n<hr>\n<p>对于图片路径，相信很多人可能都会用<code>file.value</code>来获取，那么恭喜你，你已经顺利进坑了，<br>通过<code>控制台</code>你会很清晰的看到console.log打印出这样的结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">C:/fakepath/logo.gif</div></pre></td></tr></table></figure></p>\n<p>0.0，奇了怪了，<code>fakepath</code>是什么鬼？我的文件路径明明是<code>C:/User/Desktop/01.jpg</code>，怎么变成这样了，先不去想它，继续尝试用其他方法获取。<br>这时，也许有些人因为用惯了<code>jquery</code>，会脑洞大开的尝试这样做：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">file.src</div></pre></td></tr></table></figure>\n<p>但结果却出乎你的意料，竟然不报错，更不用说得到真正的src了。<br>至此，你肯定有些气愤，却依旧不肯放弃，自然而然，想到了<code>有事问度娘</code>，”万能”的度娘，果不其然给你罗列了数不胜数的相关博客和实例。<br>于是乎，烂熟于心的<code>CV大法</code>便派上了用场，几经波折，似乎看到了一丝曙光。<br>最奇葩的IE浏览器，终于出息了一次，得到了想要的结果<code>（路径）</code>，而火狐，谷歌上却还是没有任何反馈。进而，继续查阅资料，浏览博客。<br>你可能会看到这样的结果：</p>\n<pre><code>现在比较主流、`高版本`的浏览器，像是`IE`，`firfox`，因为出于`安全`的考虑，一般都会在`设置`中禁止获取文件的`路径`，\n而`chrome`浏览器压根就不支持获取，直接把路径值设置为`&quot;&quot;`。\n</code></pre><p>对于input中的<code>file</code>对象，当选取图片（文件）后它有个<code>files</code>子对象，你选取一张图片的时候，它的length为1，而files子对象有几大属性，其中就包括<code>name</code>，<code>size</code>，上传<code>时间戳</code>，<code>上传路径</code>等，当然这个<code>路径</code>值为<code>空</code>。<br>因此，你可以根据这几个属性得到对应的属性值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">name:file.files[<span class=\"number\">0</span>].name;</div><div class=\"line\">size:file.files[<span class=\"number\">0</span>].size;</div></pre></td></tr></table></figure></p>\n<p>一般获取图片路径，无非是想做预览效果。<br>虽然浏览器不让获取X:/xxx/xxx/xxx.png这样的路径，但还是有办法得到它，只不过它经过编码了，你看不懂罢了。<br>这里要提到<code>FileReader</code>对象，简单提一下FileReader的<code>方法</code>和<code>事件</code>:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数/事件</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">方法</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">abort</td>\n<td style=\"text-align:center\">中断读取</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">readAsText(file, [encoding])</td>\n<td style=\"text-align:center\">将文件读取为文本该方法有两个参数，其中第二个参数是文本的编码方式，默认值为 UTF-8。这个方法非常容易理解，将文件以文本方式读取，读取的结果即是这个文本文件中的内容。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">readAsBinaryString(file)</td>\n<td style=\"text-align:center\">将文件读取二进制码通常我们将它传送到后端，后端可以通过这段字符串存储文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">readAsDataURL(file)</td>\n<td style=\"text-align:center\">将文件读取为DataURL将文件读取为一串Data URL字符串，将小文件以一种特殊格式的URL地址直接读入页面。小文件指图像与html等格式的文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">事件</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onabort</td>\n<td style=\"text-align:center\">数据读取中断时触发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onerror</td>\n<td style=\"text-align:center\">数据读取出错时触发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onloadstart</td>\n<td style=\"text-align:center\">数据读取开始时触发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onload</td>\n<td style=\"text-align:center\">数据读取成功完成时触发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onloadend</td>\n<td style=\"text-align:center\">数据读取完成时触发，无论成功失败</td>\n</tr>\n</tbody>\n</table>\n<p>具体方法如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> reader = <span class=\"keyword\">new</span> FileReader();</div><div class=\"line\">reader.readAsDataURL(file.files[<span class=\"number\">0</span>]);</div><div class=\"line\"><span class=\"comment\">//调用readAsDataURL方法来读取选中的图像文件</span></div><div class=\"line\">reader.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> src = e.target.result;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(src);</div><div class=\"line\">\t<span class=\"keyword\">var</span> oImg = <span class=\"keyword\">new</span> Image();<span class=\"comment\">//创建一个image对象</span></div><div class=\"line\">\t<span class=\"comment\">//也可以innerHTML的形式创建img元素，添加src</span></div><div class=\"line\">\toImg.src = src;<span class=\"comment\">//把上传图片的路径赋值给新的image对象</span></div><div class=\"line\">\tdiv1.appendChild(oImg);<span class=\"comment\">//把img添加到div1中，显示预览</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>最后终于看到了期待已久的<code>庐山真面目</code>，到这里，基本就实现了上传图片预览功能。<br>完整代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=<span class=\"string\">\"file\"</span> id=<span class=\"string\">\"file\"</span>&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"div1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> file = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'file'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> div1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div1'</span>);</div><div class=\"line\">\tfile.onchange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> fData = file.value;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(fData);<span class=\"comment\">//安全模式下的“伪路径”</span></div><div class=\"line\">\t\t<span class=\"keyword\">var</span> reader = <span class=\"keyword\">new</span> FileReader();</div><div class=\"line\">\t\treader.readAsDataURL(file.files[<span class=\"number\">0</span>]);</div><div class=\"line\">\t\t<span class=\"comment\">//调用readAsDataURL方法来读取选中的图像文件</span></div><div class=\"line\">\t\treader.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>)</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> src = e.target.result;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(src);<span class=\"comment\">//编码过的图片</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> oImg = <span class=\"keyword\">new</span> Image();<span class=\"comment\">//创建一个image对象</span></div><div class=\"line\">\t\t\t<span class=\"comment\">//也可以innerHTML的形式创建img元素，添加src</span></div><div class=\"line\">\t\t\toImg.src = src;<span class=\"comment\">//把上传图片的路径赋值给新的image对象</span></div><div class=\"line\">\t\t\tdiv1.appendChild(oImg);<span class=\"comment\">//把img添加到div1中，显示预览</span></div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure></p>\n<p>如有欠缺，不当，可在评论中提出。</p>\n<blockquote>\n<blockquote>\n<p>谢谢~O(∩_∩)O~</p>\n</blockquote>\n</blockquote>\n","excerpt":"<p>input实现图片上传看似很简单，但只有当自己真正去做时，才发现到处都是坑，一不小心就掉进去了。<br>","more":"</p>\n<p>大家请看以下代码：</p>\n<ul>\n<li><p>html部分：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input <span class=\"built_in\">type</span>=<span class=\"string\">\"file\"</span> id=<span class=\"string\">\"file\"</span> name=<span class=\"string\">\"file\"</span>&gt;</div><div class=\"line\">&lt;div id=<span class=\"string\">\"div1\"</span>&gt;&lt;/div&gt;</div></pre></td></tr></table></figure>\n</li>\n<li><p>js部分：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> file = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'file'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> div1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div1'</span>);</div><div class=\"line\">\td1.onchange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> fData = file.value;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(fData);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>一般想到上传，你首先就想获取路径的<code>路径</code>、<code>类型</code>、<code>大小</code>、<code>内容</code>等。<br>想实现图片预览，当然就得获取图片的路径，下面就来一步一步实现吧。</p>\n<hr>\n<p>对于图片路径，相信很多人可能都会用<code>file.value</code>来获取，那么恭喜你，你已经顺利进坑了，<br>通过<code>控制台</code>你会很清晰的看到console.log打印出这样的结果：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">C:/fakepath/logo.gif</div></pre></td></tr></table></figure></p>\n<p>0.0，奇了怪了，<code>fakepath</code>是什么鬼？我的文件路径明明是<code>C:/User/Desktop/01.jpg</code>，怎么变成这样了，先不去想它，继续尝试用其他方法获取。<br>这时，也许有些人因为用惯了<code>jquery</code>，会脑洞大开的尝试这样做：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">file.src</div></pre></td></tr></table></figure>\n<p>但结果却出乎你的意料，竟然不报错，更不用说得到真正的src了。<br>至此，你肯定有些气愤，却依旧不肯放弃，自然而然，想到了<code>有事问度娘</code>，”万能”的度娘，果不其然给你罗列了数不胜数的相关博客和实例。<br>于是乎，烂熟于心的<code>CV大法</code>便派上了用场，几经波折，似乎看到了一丝曙光。<br>最奇葩的IE浏览器，终于出息了一次，得到了想要的结果<code>（路径）</code>，而火狐，谷歌上却还是没有任何反馈。进而，继续查阅资料，浏览博客。<br>你可能会看到这样的结果：</p>\n<pre><code>现在比较主流、`高版本`的浏览器，像是`IE`，`firfox`，因为出于`安全`的考虑，一般都会在`设置`中禁止获取文件的`路径`，\n而`chrome`浏览器压根就不支持获取，直接把路径值设置为`&quot;&quot;`。\n</code></pre><p>对于input中的<code>file</code>对象，当选取图片（文件）后它有个<code>files</code>子对象，你选取一张图片的时候，它的length为1，而files子对象有几大属性，其中就包括<code>name</code>，<code>size</code>，上传<code>时间戳</code>，<code>上传路径</code>等，当然这个<code>路径</code>值为<code>空</code>。<br>因此，你可以根据这几个属性得到对应的属性值。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">name:file.files[<span class=\"number\">0</span>].name;</div><div class=\"line\">size:file.files[<span class=\"number\">0</span>].size;</div></pre></td></tr></table></figure></p>\n<p>一般获取图片路径，无非是想做预览效果。<br>虽然浏览器不让获取X:/xxx/xxx/xxx.png这样的路径，但还是有办法得到它，只不过它经过编码了，你看不懂罢了。<br>这里要提到<code>FileReader</code>对象，简单提一下FileReader的<code>方法</code>和<code>事件</code>:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">参数/事件</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">方法</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">abort</td>\n<td style=\"text-align:center\">中断读取</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">readAsText(file, [encoding])</td>\n<td style=\"text-align:center\">将文件读取为文本该方法有两个参数，其中第二个参数是文本的编码方式，默认值为 UTF-8。这个方法非常容易理解，将文件以文本方式读取，读取的结果即是这个文本文件中的内容。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">readAsBinaryString(file)</td>\n<td style=\"text-align:center\">将文件读取二进制码通常我们将它传送到后端，后端可以通过这段字符串存储文件</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">readAsDataURL(file)</td>\n<td style=\"text-align:center\">将文件读取为DataURL将文件读取为一串Data URL字符串，将小文件以一种特殊格式的URL地址直接读入页面。小文件指图像与html等格式的文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">事件</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onabort</td>\n<td style=\"text-align:center\">数据读取中断时触发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onerror</td>\n<td style=\"text-align:center\">数据读取出错时触发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onloadstart</td>\n<td style=\"text-align:center\">数据读取开始时触发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onload</td>\n<td style=\"text-align:center\">数据读取成功完成时触发</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">onloadend</td>\n<td style=\"text-align:center\">数据读取完成时触发，无论成功失败</td>\n</tr>\n</tbody>\n</table>\n<p>具体方法如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> reader = <span class=\"keyword\">new</span> FileReader();</div><div class=\"line\">reader.readAsDataURL(file.files[<span class=\"number\">0</span>]);</div><div class=\"line\"><span class=\"comment\">//调用readAsDataURL方法来读取选中的图像文件</span></div><div class=\"line\">reader.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> src = e.target.result;</div><div class=\"line\">\t<span class=\"built_in\">console</span>.log(src);</div><div class=\"line\">\t<span class=\"keyword\">var</span> oImg = <span class=\"keyword\">new</span> Image();<span class=\"comment\">//创建一个image对象</span></div><div class=\"line\">\t<span class=\"comment\">//也可以innerHTML的形式创建img元素，添加src</span></div><div class=\"line\">\toImg.src = src;<span class=\"comment\">//把上传图片的路径赋值给新的image对象</span></div><div class=\"line\">\tdiv1.appendChild(oImg);<span class=\"comment\">//把img添加到div1中，显示预览</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure></p>\n<p>最后终于看到了期待已久的<code>庐山真面目</code>，到这里，基本就实现了上传图片预览功能。<br>完整代码如下：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;input type=<span class=\"string\">\"file\"</span> id=<span class=\"string\">\"file\"</span>&gt;</div><div class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"div1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">&lt;script&gt;</div><div class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">var</span> file = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'file'</span>);</div><div class=\"line\">\t<span class=\"keyword\">var</span> div1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div1'</span>);</div><div class=\"line\">\tfile.onchange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">\t\t<span class=\"keyword\">var</span> fData = file.value;</div><div class=\"line\">\t\t<span class=\"built_in\">console</span>.log(fData);<span class=\"comment\">//安全模式下的“伪路径”</span></div><div class=\"line\">\t\t<span class=\"keyword\">var</span> reader = <span class=\"keyword\">new</span> FileReader();</div><div class=\"line\">\t\treader.readAsDataURL(file.files[<span class=\"number\">0</span>]);</div><div class=\"line\">\t\t<span class=\"comment\">//调用readAsDataURL方法来读取选中的图像文件</span></div><div class=\"line\">\t\treader.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>)</span>&#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> src = e.target.result;</div><div class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(src);<span class=\"comment\">//编码过的图片</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">var</span> oImg = <span class=\"keyword\">new</span> Image();<span class=\"comment\">//创建一个image对象</span></div><div class=\"line\">\t\t\t<span class=\"comment\">//也可以innerHTML的形式创建img元素，添加src</span></div><div class=\"line\">\t\t\toImg.src = src;<span class=\"comment\">//把上传图片的路径赋值给新的image对象</span></div><div class=\"line\">\t\t\tdiv1.appendChild(oImg);<span class=\"comment\">//把img添加到div1中，显示预览</span></div><div class=\"line\">\t\t&#125;;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></div></pre></td></tr></table></figure></p>\n<p>如有欠缺，不当，可在评论中提出。</p>\n<blockquote>\n<blockquote>\n<p>谢谢~O(∩_∩)O~</p>\n</blockquote>\n</blockquote>"},{"title":"seaJs模块化开发简单入门","date":"2017-03-16T05:20:55.000Z","_content":"随着前端技术的日益成熟，功能越来越丰富强大，规范也越来越健全，在这样的背景环境下很快便有了[CommonJs](http://javascript.ruanyifeng.com/nodejs/module.html)、[AMD](http://javascript.ruanyifeng.com/nodejs/module.html#toc4)、[CMD](https://github.com/cmdjs/specification/blob/master/draft/module.md)等一系列规范，使前端发开趋向模块化、规范化。\nCMD模块化的代表之一就是国内开发的[seaJs](http://seajs.org)，它有很多优点：\n<!-- more -->\n* 遵从CMD规范，代码模块化\n* 中文文档通俗易懂，入门上手简单\n* 兼容性好、配置简洁明了、提供插件接口\n\n***seajs模块化基本流程：***\n1. **引入sea.js库**\n2. **`define`定义模块**\n3. **`exports`暴露模块**\n4. **`require`导入模块**\n\n---\n## 安装\n\n1. `npm`安装\n        npm i seajs\n2. `bower`安装\n        bower i seajs\n3. 官网下载：http://seajs.org/docs/#downloads\n---\n## 定义模块\n* main.js\n```javascript\n    define(function(require,exports,module){        // 参数固定，不可随意改变\n        // 引用test.js\n        //require('./test.js')\n        /*\n        * 如果地址是一个模块，那么require的返回值就是模块中的exports\n        */\n        function alert(){\n            alert(require('./test.js').num);\n        };\n        // 向外暴露模块接口\n        exports.alert = alert;\n    })\n```\n* 1） exports : 对外的接口\n2） require : 依赖的接口\n\n* test.js\n```javascript\n    define(function(require,exports,module){\n        var num = 10;\n        exports.num = num;\n    });\n```\n---\n## 调用模块\n* html页面中引入seajs和使用use方法请求入口文件\n```html\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>seaJs</title>\n    </head>\n    <body>\n    <script src=\"sea.js\"></script>\n    <script>\n        /*\n         * seajs.use方法：\n         * 页面去调用模块，\n         * 第一个参数：模块的地址\n         * 第二个参数：地址加载成功后的回调函数\n         * seajs的默认目录：sea.js所在的目录\n         * */\n        seajs.use('./js/main.js',function(exports){\n            // 回调的参数，就是模块中的exports\n            exports.alert();\n        });\n        // 加载多个文件\n        /*\n        seajs.use(['./main.js','./main2.js'],function(ex1,ex2){\n            操作\n        })*/\n    </script>\n    </body>\n    </html>\n```\n* 加载多个入口文件\n```javascript\n    seajs.use(['./main.js','./main2.js'],function(ex1,ex2){\n        // 模块加载完成时执行回调操作\n        ex1.fn();   // 调用ex1的方法\n        ex2.fn();   // 调用ex2的方法\n    })\n```\n有些js文件可能是在某些事件触发后才会被加载使用，因此没有必要在页面刚访问时，就加在所有资源文件，这样也可以减少客户端与服务器端的请求时间，提高用户体验。\n* seaja对于此便提供了一个`async`异步请求的方法：\n```javascript\n    require.async('./test2.js',function(ex){    // 异步请求\n        ex.fn();\n    })\n```\n---\n* 如有不当，请参考[官网文档](http://seajs.org/docs/#docs)\nseajs的具体`config`配置见：https://github.com/seajs/seajs/issues/262\n\n* 参考文档：\n1. http://seajs.org/docs/#docs\n2. http://www.antcome.com/myfaq/SeaJS.html\n","source":"_posts/seaJs模块化开发简单入门.md","raw":"---\ntitle: seaJs模块化开发简单入门\ndate: 2017-3-16 13:20:55\ntags:\n  - seajs\n  - js\n  - CMD\n  - 模块化\n---\n随着前端技术的日益成熟，功能越来越丰富强大，规范也越来越健全，在这样的背景环境下很快便有了[CommonJs](http://javascript.ruanyifeng.com/nodejs/module.html)、[AMD](http://javascript.ruanyifeng.com/nodejs/module.html#toc4)、[CMD](https://github.com/cmdjs/specification/blob/master/draft/module.md)等一系列规范，使前端发开趋向模块化、规范化。\nCMD模块化的代表之一就是国内开发的[seaJs](http://seajs.org)，它有很多优点：\n<!-- more -->\n* 遵从CMD规范，代码模块化\n* 中文文档通俗易懂，入门上手简单\n* 兼容性好、配置简洁明了、提供插件接口\n\n***seajs模块化基本流程：***\n1. **引入sea.js库**\n2. **`define`定义模块**\n3. **`exports`暴露模块**\n4. **`require`导入模块**\n\n---\n## 安装\n\n1. `npm`安装\n        npm i seajs\n2. `bower`安装\n        bower i seajs\n3. 官网下载：http://seajs.org/docs/#downloads\n---\n## 定义模块\n* main.js\n```javascript\n    define(function(require,exports,module){        // 参数固定，不可随意改变\n        // 引用test.js\n        //require('./test.js')\n        /*\n        * 如果地址是一个模块，那么require的返回值就是模块中的exports\n        */\n        function alert(){\n            alert(require('./test.js').num);\n        };\n        // 向外暴露模块接口\n        exports.alert = alert;\n    })\n```\n* 1） exports : 对外的接口\n2） require : 依赖的接口\n\n* test.js\n```javascript\n    define(function(require,exports,module){\n        var num = 10;\n        exports.num = num;\n    });\n```\n---\n## 调用模块\n* html页面中引入seajs和使用use方法请求入口文件\n```html\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>seaJs</title>\n    </head>\n    <body>\n    <script src=\"sea.js\"></script>\n    <script>\n        /*\n         * seajs.use方法：\n         * 页面去调用模块，\n         * 第一个参数：模块的地址\n         * 第二个参数：地址加载成功后的回调函数\n         * seajs的默认目录：sea.js所在的目录\n         * */\n        seajs.use('./js/main.js',function(exports){\n            // 回调的参数，就是模块中的exports\n            exports.alert();\n        });\n        // 加载多个文件\n        /*\n        seajs.use(['./main.js','./main2.js'],function(ex1,ex2){\n            操作\n        })*/\n    </script>\n    </body>\n    </html>\n```\n* 加载多个入口文件\n```javascript\n    seajs.use(['./main.js','./main2.js'],function(ex1,ex2){\n        // 模块加载完成时执行回调操作\n        ex1.fn();   // 调用ex1的方法\n        ex2.fn();   // 调用ex2的方法\n    })\n```\n有些js文件可能是在某些事件触发后才会被加载使用，因此没有必要在页面刚访问时，就加在所有资源文件，这样也可以减少客户端与服务器端的请求时间，提高用户体验。\n* seaja对于此便提供了一个`async`异步请求的方法：\n```javascript\n    require.async('./test2.js',function(ex){    // 异步请求\n        ex.fn();\n    })\n```\n---\n* 如有不当，请参考[官网文档](http://seajs.org/docs/#docs)\nseajs的具体`config`配置见：https://github.com/seajs/seajs/issues/262\n\n* 参考文档：\n1. http://seajs.org/docs/#docs\n2. http://www.antcome.com/myfaq/SeaJS.html\n","slug":"seaJs模块化开发简单入门","published":1,"updated":"2017-03-25T07:50:23.589Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0s9eigm0008vgb9l0ycddzg","content":"<p>随着前端技术的日益成熟，功能越来越丰富强大，规范也越来越健全，在这样的背景环境下很快便有了<a href=\"http://javascript.ruanyifeng.com/nodejs/module.html\" target=\"_blank\" rel=\"external\">CommonJs</a>、<a href=\"http://javascript.ruanyifeng.com/nodejs/module.html#toc4\" target=\"_blank\" rel=\"external\">AMD</a>、<a href=\"https://github.com/cmdjs/specification/blob/master/draft/module.md\" target=\"_blank\" rel=\"external\">CMD</a>等一系列规范，使前端发开趋向模块化、规范化。<br>CMD模块化的代表之一就是国内开发的<a href=\"http://seajs.org\" target=\"_blank\" rel=\"external\">seaJs</a>，它有很多优点：<br><a id=\"more\"></a></p>\n<ul>\n<li>遵从CMD规范，代码模块化</li>\n<li>中文文档通俗易懂，入门上手简单</li>\n<li>兼容性好、配置简洁明了、提供插件接口</li>\n</ul>\n<p><strong><em>seajs模块化基本流程：</em></strong></p>\n<ol>\n<li><strong>引入sea.js库</strong></li>\n<li><strong><code>define</code>定义模块</strong></li>\n<li><strong><code>exports</code>暴露模块</strong></li>\n<li><strong><code>require</code>导入模块</strong></li>\n</ol>\n<hr>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li><code>npm</code>安装<pre><code>npm i seajs\n</code></pre></li>\n<li><code>bower</code>安装<pre><code>bower i seajs\n</code></pre></li>\n<li>官网下载：<a href=\"http://seajs.org/docs/#downloads\" target=\"_blank\" rel=\"external\">http://seajs.org/docs/#downloads</a></li>\n</ol>\n<hr>\n<h2 id=\"定义模块\"><a href=\"#定义模块\" class=\"headerlink\" title=\"定义模块\"></a>定义模块</h2><ul>\n<li><p>main.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require,exports,module</span>)</span>&#123;        <span class=\"comment\">// 参数固定，不可随意改变</span></div><div class=\"line\">    <span class=\"comment\">// 引用test.js</span></div><div class=\"line\">    <span class=\"comment\">//require('./test.js')</span></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">    * 如果地址是一个模块，那么require的返回值就是模块中的exports</div><div class=\"line\">    */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">alert</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        alert(<span class=\"built_in\">require</span>(<span class=\"string\">'./test.js'</span>).num);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"comment\">// 向外暴露模块接口</span></div><div class=\"line\">    exports.alert = alert;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>1） exports : 对外的接口<br>2） require : 依赖的接口</p>\n</li>\n<li><p>test.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require,exports,module</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"number\">10</span>;</div><div class=\"line\">    exports.num = num;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"调用模块\"><a href=\"#调用模块\" class=\"headerlink\" title=\"调用模块\"></a>调用模块</h2><ul>\n<li><p>html页面中引入seajs和使用use方法请求入口文件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>seaJs<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"sea.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">     * seajs.use方法：</div><div class=\"line\">     * 页面去调用模块，</div><div class=\"line\">     * 第一个参数：模块的地址</div><div class=\"line\">     * 第二个参数：地址加载成功后的回调函数</div><div class=\"line\">     * seajs的默认目录：sea.js所在的目录</div><div class=\"line\">     * */</div><div class=\"line\">    seajs.use(<span class=\"string\">'./js/main.js'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">exports</span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 回调的参数，就是模块中的exports</span></div><div class=\"line\">        exports.alert();</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"comment\">// 加载多个文件</span></div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">    seajs.use(['./main.js','./main2.js'],function(ex1,ex2)&#123;</div><div class=\"line\">        操作</div><div class=\"line\">    &#125;)*/</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>加载多个入口文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">seajs.use([<span class=\"string\">'./main.js'</span>,<span class=\"string\">'./main2.js'</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ex1,ex2</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 模块加载完成时执行回调操作</span></div><div class=\"line\">    ex1.fn();   <span class=\"comment\">// 调用ex1的方法</span></div><div class=\"line\">    ex2.fn();   <span class=\"comment\">// 调用ex2的方法</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>有些js文件可能是在某些事件触发后才会被加载使用，因此没有必要在页面刚访问时，就加在所有资源文件，这样也可以减少客户端与服务器端的请求时间，提高用户体验。</p>\n<ul>\n<li>seaja对于此便提供了一个<code>async</code>异步请求的方法：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>.async(<span class=\"string\">'./test2.js'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ex</span>)</span>&#123;    <span class=\"comment\">// 异步请求</span></div><div class=\"line\">    ex.fn();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p>如有不当，请参考<a href=\"http://seajs.org/docs/#docs\" target=\"_blank\" rel=\"external\">官网文档</a><br>seajs的具体<code>config</code>配置见：<a href=\"https://github.com/seajs/seajs/issues/262\" target=\"_blank\" rel=\"external\">https://github.com/seajs/seajs/issues/262</a></p>\n</li>\n<li><p>参考文档：</p>\n</li>\n</ul>\n<ol>\n<li><a href=\"http://seajs.org/docs/#docs\" target=\"_blank\" rel=\"external\">http://seajs.org/docs/#docs</a></li>\n<li><a href=\"http://www.antcome.com/myfaq/SeaJS.html\" target=\"_blank\" rel=\"external\">http://www.antcome.com/myfaq/SeaJS.html</a></li>\n</ol>\n","excerpt":"<p>随着前端技术的日益成熟，功能越来越丰富强大，规范也越来越健全，在这样的背景环境下很快便有了<a href=\"http://javascript.ruanyifeng.com/nodejs/module.html\">CommonJs</a>、<a href=\"http://javascript.ruanyifeng.com/nodejs/module.html#toc4\">AMD</a>、<a href=\"https://github.com/cmdjs/specification/blob/master/draft/module.md\">CMD</a>等一系列规范，使前端发开趋向模块化、规范化。<br>CMD模块化的代表之一就是国内开发的<a href=\"http://seajs.org\">seaJs</a>，它有很多优点：<br>","more":"</p>\n<ul>\n<li>遵从CMD规范，代码模块化</li>\n<li>中文文档通俗易懂，入门上手简单</li>\n<li>兼容性好、配置简洁明了、提供插件接口</li>\n</ul>\n<p><strong><em>seajs模块化基本流程：</em></strong></p>\n<ol>\n<li><strong>引入sea.js库</strong></li>\n<li><strong><code>define</code>定义模块</strong></li>\n<li><strong><code>exports</code>暴露模块</strong></li>\n<li><strong><code>require</code>导入模块</strong></li>\n</ol>\n<hr>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><ol>\n<li><code>npm</code>安装<pre><code>npm i seajs\n</code></pre></li>\n<li><code>bower</code>安装<pre><code>bower i seajs\n</code></pre></li>\n<li>官网下载：<a href=\"http://seajs.org/docs/#downloads\">http://seajs.org/docs/#downloads</a></li>\n</ol>\n<hr>\n<h2 id=\"定义模块\"><a href=\"#定义模块\" class=\"headerlink\" title=\"定义模块\"></a>定义模块</h2><ul>\n<li><p>main.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require,exports,module</span>)</span>&#123;        <span class=\"comment\">// 参数固定，不可随意改变</span></div><div class=\"line\">    <span class=\"comment\">// 引用test.js</span></div><div class=\"line\">    <span class=\"comment\">//require('./test.js')</span></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">    * 如果地址是一个模块，那么require的返回值就是模块中的exports</div><div class=\"line\">    */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">alert</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        alert(<span class=\"built_in\">require</span>(<span class=\"string\">'./test.js'</span>).num);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    <span class=\"comment\">// 向外暴露模块接口</span></div><div class=\"line\">    exports.alert = alert;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>1） exports : 对外的接口<br>2） require : 依赖的接口</p>\n</li>\n<li><p>test.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">define(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">require,exports,module</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> num = <span class=\"number\">10</span>;</div><div class=\"line\">    exports.num = num;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"调用模块\"><a href=\"#调用模块\" class=\"headerlink\" title=\"调用模块\"></a>调用模块</h2><ul>\n<li><p>html页面中引入seajs和使用use方法请求入口文件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>seaJs<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"sea.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">     * seajs.use方法：</div><div class=\"line\">     * 页面去调用模块，</div><div class=\"line\">     * 第一个参数：模块的地址</div><div class=\"line\">     * 第二个参数：地址加载成功后的回调函数</div><div class=\"line\">     * seajs的默认目录：sea.js所在的目录</div><div class=\"line\">     * */</span></div><div class=\"line\">    seajs.use(<span class=\"string\">'./js/main.js'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">exports</span>)</span>&#123;</div><div class=\"line\">        <span class=\"comment\">// 回调的参数，就是模块中的exports</span></div><div class=\"line\">        exports.alert();</div><div class=\"line\">    &#125;);</div><div class=\"line\">    <span class=\"comment\">// 加载多个文件</span></div><div class=\"line\">    <span class=\"comment\">/*</div><div class=\"line\">    seajs.use(['./main.js','./main2.js'],function(ex1,ex2)&#123;</div><div class=\"line\">        操作</div><div class=\"line\">    &#125;)*/</span></div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>加载多个入口文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">seajs.use([<span class=\"string\">'./main.js'</span>,<span class=\"string\">'./main2.js'</span>],<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ex1,ex2</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 模块加载完成时执行回调操作</span></div><div class=\"line\">    ex1.fn();   <span class=\"comment\">// 调用ex1的方法</span></div><div class=\"line\">    ex2.fn();   <span class=\"comment\">// 调用ex2的方法</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>有些js文件可能是在某些事件触发后才会被加载使用，因此没有必要在页面刚访问时，就加在所有资源文件，这样也可以减少客户端与服务器端的请求时间，提高用户体验。</p>\n<ul>\n<li>seaja对于此便提供了一个<code>async</code>异步请求的方法：<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">require</span>.async(<span class=\"string\">'./test2.js'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ex</span>)</span>&#123;    <span class=\"comment\">// 异步请求</span></div><div class=\"line\">    ex.fn();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<ul>\n<li><p>如有不当，请参考<a href=\"http://seajs.org/docs/#docs\">官网文档</a><br>seajs的具体<code>config</code>配置见：<a href=\"https://github.com/seajs/seajs/issues/262\">https://github.com/seajs/seajs/issues/262</a></p>\n</li>\n<li><p>参考文档：</p>\n</li>\n</ul>\n<ol>\n<li><a href=\"http://seajs.org/docs/#docs\">http://seajs.org/docs/#docs</a></li>\n<li><a href=\"http://www.antcome.com/myfaq/SeaJS.html\">http://www.antcome.com/myfaq/SeaJS.html</a></li>\n</ol>"},{"title":"程序猿必学——Markdown语法","date":"2016-11-28T06:20:45.000Z","_content":"`Markdown`是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式，从而让文本`易读易写`，增强可读性。\n因此，Markdown被广泛的应用于`个人博客`、`Github`、`Coding`等具有大量文本的交流学习网站。\n<!--more-->\n\n---\n### 标题\n* 标题有六级，分为一级、二级...到五级、六级，类似于HTML中的`h1-h6`标签，标题文字前加`#`号，一级前边就是一个`#`，六级前边就是六个`#`,以此类推。\n* 提示：`#`与后边文字中间要加上一个`空格`。\n**md写法：**\n        # 一级标题\n        ## 二级标题\n        ### 三级标题\n        #### 四级标题\n        ##### 五级标题\n        ###### 六级标题\n**结果显示：**\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n--------\n### 单行文本与多行文本\n* `单行文本`与`多行文本`前加入两个`Tab`即可\n        文本前加入两个Tab即可\n        文本前加入两个Tab即可\n---\n### 无序（ul）列表\n**md写法：**\n        * 昵称：青春^O^无限\n        * 别名：松枫\n        * 英文名：zmnaer\n**结果显示：**\n* 昵称：青春^O^无限\n* 别名：松枫\n* 英文名：zmnaer\n----\n### 有序（ol）列表\n* 一个`数字`+`.`+`内容`\n**md写法：**\n        1. 前端\n        3. 后台\n        4. 测试\n        9. UI\n        6. 产品\n**结果显示：**\n1. 前端\n3. 后台\n4. 测试\n9. UI\n6. 产品\n* 提示：这里的`数字`，并不需要按照一定顺序排列。\n\n------\n### 结构列表\n**md写法：**\n\n    * 编程语言\n        * 脚本语言\n            * Python\n**结果显示：**\n* 编程语言\n    * 脚本语言\n        * Python\n---\n### 一个带有title属性的图片（img标签）\n**md写法：**\n\n        ![IMG](http://ohecg7vrp.bkt.clouddn.com/01.jpg \"Hello\")\n**结果显示：**\n![IMG](http://ohecg7vrp.bkt.clouddn.com/01.jpg \"Hello\")\n\n---\n### 一个超链接（a标签）\n**md写法：**\n\n        [个人博客](http://zmnaer.com \"zmnaer个人博客\")\n**结果显示：**\n[个人博客](http://zmnaer.com \"zmnaer个人博客\")\n\n---\n\n### 一个有超链接的图片\n**md写法：**\n\n        [![zmnaer]](http://zmnaer.com)\n        [zmnaer]:http://ohecg7vrp.bkt.clouddn.com/14.gif \"blog\"\n**结果显示：**\n[![zmnaer]](http://zmnaer.com)\n[zmnaer]:http://ohecg7vrp.bkt.clouddn.com/14.gif \"blog\"\n\n---\n### 换行符（br）\n**md写法：**\n\n        第一行文字\n        <br/>\n        第二行文字\n**结果显示：**\n第一行文字\n<br/>\n第二行文字\n\n---\n### 高亮文字\n**md写法：**\n\n        `高亮`显示的`文字`\n**结果显示：**\n`高亮`显示的`文字`\n\n---\n### 特别显示的文本块\n**md写法：**\n* 三个`·`+`bash`(或者java、javascript、php、html...) +换行+`代码块...`+换行+三个`·`\n**结果显示：**\n```javascript\ndocument.getElementById('obj');//javascript\n```\n* 提示：此处的`·`是`英文输入法`下`Tab键`上边的那个字符，`+`号请忽略不要写。\n----\n\n## 表格\n**md写法：**\n\n        |表头1|表头2|表头3|\n        |:---:|:---:|:---:|\n        |con11|con22|con33|\n        |con11|con22|con33|\n**结果显示：**\n\n|表头1|表头2|表头3|\n|:---:|:---:|:---:|\n|con11|con22|con33|\n|con11|con22|con33|\n* 提示：此处的`:`相当于CSS中的`text-align`属性；`:`在左边就是文本`左对齐`；`:`在右边就是文本`右对齐`；如果两边都有，则本文`居中`显示(相当于text-align:center)。\n\n---\n***提示：***\n* 一般Markdown文档都是以`.md`后缀结尾的。\n* 文中所有的`·`是`英文输入法`下`Tab键`上边的那个字符，`+`号请忽略不要写。（补充：高亮显示和特别显示中的`·`）;\n* Markdown支持大部分`HTML标签`，可以直接写HTML标签，并能加`内联样式`。\n* Markdown在各个地方解析的情况不同，因此结果显示会有所区别，有的平台不能解析表格。\n* 此文仅供参考，如有不详之处，望见谅。\n\n\n","source":"_posts/程序猿必学——Markdown语法.md","raw":"---\ntitle: 程序猿必学——Markdown语法\ndate: 2016-11-28 14:20:45\ntags:\n  - Markdown\n  - 编辑\n---\n`Markdown`是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式，从而让文本`易读易写`，增强可读性。\n因此，Markdown被广泛的应用于`个人博客`、`Github`、`Coding`等具有大量文本的交流学习网站。\n<!--more-->\n\n---\n### 标题\n* 标题有六级，分为一级、二级...到五级、六级，类似于HTML中的`h1-h6`标签，标题文字前加`#`号，一级前边就是一个`#`，六级前边就是六个`#`,以此类推。\n* 提示：`#`与后边文字中间要加上一个`空格`。\n**md写法：**\n        # 一级标题\n        ## 二级标题\n        ### 三级标题\n        #### 四级标题\n        ##### 五级标题\n        ###### 六级标题\n**结果显示：**\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n--------\n### 单行文本与多行文本\n* `单行文本`与`多行文本`前加入两个`Tab`即可\n        文本前加入两个Tab即可\n        文本前加入两个Tab即可\n---\n### 无序（ul）列表\n**md写法：**\n        * 昵称：青春^O^无限\n        * 别名：松枫\n        * 英文名：zmnaer\n**结果显示：**\n* 昵称：青春^O^无限\n* 别名：松枫\n* 英文名：zmnaer\n----\n### 有序（ol）列表\n* 一个`数字`+`.`+`内容`\n**md写法：**\n        1. 前端\n        3. 后台\n        4. 测试\n        9. UI\n        6. 产品\n**结果显示：**\n1. 前端\n3. 后台\n4. 测试\n9. UI\n6. 产品\n* 提示：这里的`数字`，并不需要按照一定顺序排列。\n\n------\n### 结构列表\n**md写法：**\n\n    * 编程语言\n        * 脚本语言\n            * Python\n**结果显示：**\n* 编程语言\n    * 脚本语言\n        * Python\n---\n### 一个带有title属性的图片（img标签）\n**md写法：**\n\n        ![IMG](http://ohecg7vrp.bkt.clouddn.com/01.jpg \"Hello\")\n**结果显示：**\n![IMG](http://ohecg7vrp.bkt.clouddn.com/01.jpg \"Hello\")\n\n---\n### 一个超链接（a标签）\n**md写法：**\n\n        [个人博客](http://zmnaer.com \"zmnaer个人博客\")\n**结果显示：**\n[个人博客](http://zmnaer.com \"zmnaer个人博客\")\n\n---\n\n### 一个有超链接的图片\n**md写法：**\n\n        [![zmnaer]](http://zmnaer.com)\n        [zmnaer]:http://ohecg7vrp.bkt.clouddn.com/14.gif \"blog\"\n**结果显示：**\n[![zmnaer]](http://zmnaer.com)\n[zmnaer]:http://ohecg7vrp.bkt.clouddn.com/14.gif \"blog\"\n\n---\n### 换行符（br）\n**md写法：**\n\n        第一行文字\n        <br/>\n        第二行文字\n**结果显示：**\n第一行文字\n<br/>\n第二行文字\n\n---\n### 高亮文字\n**md写法：**\n\n        `高亮`显示的`文字`\n**结果显示：**\n`高亮`显示的`文字`\n\n---\n### 特别显示的文本块\n**md写法：**\n* 三个`·`+`bash`(或者java、javascript、php、html...) +换行+`代码块...`+换行+三个`·`\n**结果显示：**\n```javascript\ndocument.getElementById('obj');//javascript\n```\n* 提示：此处的`·`是`英文输入法`下`Tab键`上边的那个字符，`+`号请忽略不要写。\n----\n\n## 表格\n**md写法：**\n\n        |表头1|表头2|表头3|\n        |:---:|:---:|:---:|\n        |con11|con22|con33|\n        |con11|con22|con33|\n**结果显示：**\n\n|表头1|表头2|表头3|\n|:---:|:---:|:---:|\n|con11|con22|con33|\n|con11|con22|con33|\n* 提示：此处的`:`相当于CSS中的`text-align`属性；`:`在左边就是文本`左对齐`；`:`在右边就是文本`右对齐`；如果两边都有，则本文`居中`显示(相当于text-align:center)。\n\n---\n***提示：***\n* 一般Markdown文档都是以`.md`后缀结尾的。\n* 文中所有的`·`是`英文输入法`下`Tab键`上边的那个字符，`+`号请忽略不要写。（补充：高亮显示和特别显示中的`·`）;\n* Markdown支持大部分`HTML标签`，可以直接写HTML标签，并能加`内联样式`。\n* Markdown在各个地方解析的情况不同，因此结果显示会有所区别，有的平台不能解析表格。\n* 此文仅供参考，如有不详之处，望见谅。\n\n\n","slug":"程序猿必学——Markdown语法","published":1,"updated":"2017-03-25T07:50:23.590Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0s9eigr0009vgb9g758g34p","content":"<p><code>Markdown</code>是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式，从而让文本<code>易读易写</code>，增强可读性。<br>因此，Markdown被广泛的应用于<code>个人博客</code>、<code>Github</code>、<code>Coding</code>等具有大量文本的交流学习网站。<br><a id=\"more\"></a></p>\n<hr>\n<h3 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h3><ul>\n<li>标题有六级，分为一级、二级…到五级、六级，类似于HTML中的<code>h1-h6</code>标签，标题文字前加<code>#</code>号，一级前边就是一个<code>#</code>，六级前边就是六个<code>#</code>,以此类推。</li>\n<li>提示：<code>#</code>与后边文字中间要加上一个<code>空格</code>。<br><strong>md写法：</strong><pre><code># 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n</code></pre><strong>结果显示：</strong><h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><h4 id=\"四级标题\"><a href=\"#四级标题\" class=\"headerlink\" title=\"四级标题\"></a>四级标题</h4><h5 id=\"五级标题\"><a href=\"#五级标题\" class=\"headerlink\" title=\"五级标题\"></a>五级标题</h5><h6 id=\"六级标题\"><a href=\"#六级标题\" class=\"headerlink\" title=\"六级标题\"></a>六级标题</h6></li>\n</ul>\n<hr>\n<h3 id=\"单行文本与多行文本\"><a href=\"#单行文本与多行文本\" class=\"headerlink\" title=\"单行文本与多行文本\"></a>单行文本与多行文本</h3><ul>\n<li><code>单行文本</code>与<code>多行文本</code>前加入两个<code>Tab</code>即可<pre><code>文本前加入两个Tab即可\n文本前加入两个Tab即可\n</code></pre></li>\n</ul>\n<hr>\n<h3 id=\"无序（ul）列表\"><a href=\"#无序（ul）列表\" class=\"headerlink\" title=\"无序（ul）列表\"></a>无序（ul）列表</h3><p><strong>md写法：</strong></p>\n<pre><code>* 昵称：青春^O^无限\n* 别名：松枫\n* 英文名：zmnaer\n</code></pre><p><strong>结果显示：</strong></p>\n<ul>\n<li>昵称：青春^O^无限</li>\n<li>别名：松枫</li>\n<li>英文名：zmnaer</li>\n</ul>\n<hr>\n<h3 id=\"有序（ol）列表\"><a href=\"#有序（ol）列表\" class=\"headerlink\" title=\"有序（ol）列表\"></a>有序（ol）列表</h3><ul>\n<li>一个<code>数字</code>+<code>.</code>+<code>内容</code><br><strong>md写法：</strong><pre><code>1. 前端\n3. 后台\n4. 测试\n9. UI\n6. 产品\n</code></pre><strong>结果显示：</strong></li>\n</ul>\n<ol>\n<li>前端</li>\n<li>后台</li>\n<li>测试</li>\n<li>UI</li>\n<li>产品</li>\n</ol>\n<ul>\n<li>提示：这里的<code>数字</code>，并不需要按照一定顺序排列。</li>\n</ul>\n<hr>\n<h3 id=\"结构列表\"><a href=\"#结构列表\" class=\"headerlink\" title=\"结构列表\"></a>结构列表</h3><p><strong>md写法：</strong></p>\n<pre><code>* 编程语言\n    * 脚本语言\n        * Python\n</code></pre><p><strong>结果显示：</strong></p>\n<ul>\n<li>编程语言<ul>\n<li>脚本语言<ul>\n<li>Python</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"一个带有title属性的图片（img标签）\"><a href=\"#一个带有title属性的图片（img标签）\" class=\"headerlink\" title=\"一个带有title属性的图片（img标签）\"></a>一个带有title属性的图片（img标签）</h3><p><strong>md写法：</strong></p>\n<pre><code>![IMG](http://ohecg7vrp.bkt.clouddn.com/01.jpg &quot;Hello&quot;)\n</code></pre><p><strong>结果显示：</strong><br><img src=\"http://ohecg7vrp.bkt.clouddn.com/01.jpg\" alt=\"IMG\" title=\"Hello\"></p>\n<hr>\n<h3 id=\"一个超链接（a标签）\"><a href=\"#一个超链接（a标签）\" class=\"headerlink\" title=\"一个超链接（a标签）\"></a>一个超链接（a标签）</h3><p><strong>md写法：</strong></p>\n<pre><code>[个人博客](http://zmnaer.com &quot;zmnaer个人博客&quot;)\n</code></pre><p><strong>结果显示：</strong><br><a href=\"http://zmnaer.com\" title=\"zmnaer个人博客\" target=\"_blank\" rel=\"external\">个人博客</a></p>\n<hr>\n<h3 id=\"一个有超链接的图片\"><a href=\"#一个有超链接的图片\" class=\"headerlink\" title=\"一个有超链接的图片\"></a>一个有超链接的图片</h3><p><strong>md写法：</strong></p>\n<pre><code>[![zmnaer]](http://zmnaer.com)\n[zmnaer]:http://ohecg7vrp.bkt.clouddn.com/14.gif &quot;blog&quot;\n</code></pre><p><strong>结果显示：</strong><br><a href=\"http://zmnaer.com\" target=\"_blank\" rel=\"external\"><img src=\"http://ohecg7vrp.bkt.clouddn.com/14.gif\" alt=\"zmnaer\" title=\"blog\"></a></p>\n<hr>\n<h3 id=\"换行符（br）\"><a href=\"#换行符（br）\" class=\"headerlink\" title=\"换行符（br）\"></a>换行符（br）</h3><p><strong>md写法：</strong></p>\n<pre><code>第一行文字\n&lt;br/&gt;\n第二行文字\n</code></pre><p><strong>结果显示：</strong><br>第一行文字<br><br><br>第二行文字</p>\n<hr>\n<h3 id=\"高亮文字\"><a href=\"#高亮文字\" class=\"headerlink\" title=\"高亮文字\"></a>高亮文字</h3><p><strong>md写法：</strong></p>\n<pre><code>`高亮`显示的`文字`\n</code></pre><p><strong>结果显示：</strong><br><code>高亮</code>显示的<code>文字</code></p>\n<hr>\n<h3 id=\"特别显示的文本块\"><a href=\"#特别显示的文本块\" class=\"headerlink\" title=\"特别显示的文本块\"></a>特别显示的文本块</h3><p><strong>md写法：</strong></p>\n<ul>\n<li><p>三个<code>·</code>+<code>bash</code>(或者java、javascript、php、html…) +换行+<code>代码块...</code>+换行+三个<code>·</code><br><strong>结果显示：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'obj'</span>);<span class=\"comment\">//javascript</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>提示：此处的<code>·</code>是<code>英文输入法</code>下<code>Tab键</code>上边的那个字符，<code>+</code>号请忽略不要写。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><p><strong>md写法：</strong></p>\n<pre><code>|表头1|表头2|表头3|\n|:---:|:---:|:---:|\n|con11|con22|con33|\n|con11|con22|con33|\n</code></pre><p><strong>结果显示：</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">表头1</th>\n<th style=\"text-align:center\">表头2</th>\n<th style=\"text-align:center\">表头3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">con11</td>\n<td style=\"text-align:center\">con22</td>\n<td style=\"text-align:center\">con33</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">con11</td>\n<td style=\"text-align:center\">con22</td>\n<td style=\"text-align:center\">con33</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>提示：此处的<code>:</code>相当于CSS中的<code>text-align</code>属性；<code>:</code>在左边就是文本<code>左对齐</code>；<code>:</code>在右边就是文本<code>右对齐</code>；如果两边都有，则本文<code>居中</code>显示(相当于text-align:center)。</li>\n</ul>\n<hr>\n<p><strong><em>提示：</em></strong></p>\n<ul>\n<li>一般Markdown文档都是以<code>.md</code>后缀结尾的。</li>\n<li>文中所有的<code>·</code>是<code>英文输入法</code>下<code>Tab键</code>上边的那个字符，<code>+</code>号请忽略不要写。（补充：高亮显示和特别显示中的<code>·</code>）;</li>\n<li>Markdown支持大部分<code>HTML标签</code>，可以直接写HTML标签，并能加<code>内联样式</code>。</li>\n<li>Markdown在各个地方解析的情况不同，因此结果显示会有所区别，有的平台不能解析表格。</li>\n<li>此文仅供参考，如有不详之处，望见谅。</li>\n</ul>\n","excerpt":"<p><code>Markdown</code>是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式，从而让文本<code>易读易写</code>，增强可读性。<br>因此，Markdown被广泛的应用于<code>个人博客</code>、<code>Github</code>、<code>Coding</code>等具有大量文本的交流学习网站。<br>","more":"</p>\n<hr>\n<h3 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h3><ul>\n<li>标题有六级，分为一级、二级…到五级、六级，类似于HTML中的<code>h1-h6</code>标签，标题文字前加<code>#</code>号，一级前边就是一个<code>#</code>，六级前边就是六个<code>#</code>,以此类推。</li>\n<li>提示：<code>#</code>与后边文字中间要加上一个<code>空格</code>。<br><strong>md写法：</strong><pre><code># 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题\n</code></pre><strong>结果显示：</strong><h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><h4 id=\"四级标题\"><a href=\"#四级标题\" class=\"headerlink\" title=\"四级标题\"></a>四级标题</h4><h5 id=\"五级标题\"><a href=\"#五级标题\" class=\"headerlink\" title=\"五级标题\"></a>五级标题</h5><h6 id=\"六级标题\"><a href=\"#六级标题\" class=\"headerlink\" title=\"六级标题\"></a>六级标题</h6></li>\n</ul>\n<hr>\n<h3 id=\"单行文本与多行文本\"><a href=\"#单行文本与多行文本\" class=\"headerlink\" title=\"单行文本与多行文本\"></a>单行文本与多行文本</h3><ul>\n<li><code>单行文本</code>与<code>多行文本</code>前加入两个<code>Tab</code>即可<pre><code>文本前加入两个Tab即可\n文本前加入两个Tab即可\n</code></pre></li>\n</ul>\n<hr>\n<h3 id=\"无序（ul）列表\"><a href=\"#无序（ul）列表\" class=\"headerlink\" title=\"无序（ul）列表\"></a>无序（ul）列表</h3><p><strong>md写法：</strong></p>\n<pre><code>* 昵称：青春^O^无限\n* 别名：松枫\n* 英文名：zmnaer\n</code></pre><p><strong>结果显示：</strong></p>\n<ul>\n<li>昵称：青春^O^无限</li>\n<li>别名：松枫</li>\n<li>英文名：zmnaer</li>\n</ul>\n<hr>\n<h3 id=\"有序（ol）列表\"><a href=\"#有序（ol）列表\" class=\"headerlink\" title=\"有序（ol）列表\"></a>有序（ol）列表</h3><ul>\n<li>一个<code>数字</code>+<code>.</code>+<code>内容</code><br><strong>md写法：</strong><pre><code>1. 前端\n3. 后台\n4. 测试\n9. UI\n6. 产品\n</code></pre><strong>结果显示：</strong></li>\n</ul>\n<ol>\n<li>前端</li>\n<li>后台</li>\n<li>测试</li>\n<li>UI</li>\n<li>产品</li>\n</ol>\n<ul>\n<li>提示：这里的<code>数字</code>，并不需要按照一定顺序排列。</li>\n</ul>\n<hr>\n<h3 id=\"结构列表\"><a href=\"#结构列表\" class=\"headerlink\" title=\"结构列表\"></a>结构列表</h3><p><strong>md写法：</strong></p>\n<pre><code>* 编程语言\n    * 脚本语言\n        * Python\n</code></pre><p><strong>结果显示：</strong></p>\n<ul>\n<li>编程语言<ul>\n<li>脚本语言<ul>\n<li>Python</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"一个带有title属性的图片（img标签）\"><a href=\"#一个带有title属性的图片（img标签）\" class=\"headerlink\" title=\"一个带有title属性的图片（img标签）\"></a>一个带有title属性的图片（img标签）</h3><p><strong>md写法：</strong></p>\n<pre><code>![IMG](http://ohecg7vrp.bkt.clouddn.com/01.jpg &quot;Hello&quot;)\n</code></pre><p><strong>结果显示：</strong><br><img src=\"http://ohecg7vrp.bkt.clouddn.com/01.jpg\" alt=\"IMG\" title=\"Hello\"></p>\n<hr>\n<h3 id=\"一个超链接（a标签）\"><a href=\"#一个超链接（a标签）\" class=\"headerlink\" title=\"一个超链接（a标签）\"></a>一个超链接（a标签）</h3><p><strong>md写法：</strong></p>\n<pre><code>[个人博客](http://zmnaer.com &quot;zmnaer个人博客&quot;)\n</code></pre><p><strong>结果显示：</strong><br><a href=\"http://zmnaer.com\" title=\"zmnaer个人博客\">个人博客</a></p>\n<hr>\n<h3 id=\"一个有超链接的图片\"><a href=\"#一个有超链接的图片\" class=\"headerlink\" title=\"一个有超链接的图片\"></a>一个有超链接的图片</h3><p><strong>md写法：</strong></p>\n<pre><code>[![zmnaer]](http://zmnaer.com)\n[zmnaer]:http://ohecg7vrp.bkt.clouddn.com/14.gif &quot;blog&quot;\n</code></pre><p><strong>结果显示：</strong><br><a href=\"http://zmnaer.com\"><img src=\"http://ohecg7vrp.bkt.clouddn.com/14.gif\" alt=\"zmnaer\" title=\"blog\"></a></p>\n<hr>\n<h3 id=\"换行符（br）\"><a href=\"#换行符（br）\" class=\"headerlink\" title=\"换行符（br）\"></a>换行符（br）</h3><p><strong>md写法：</strong></p>\n<pre><code>第一行文字\n&lt;br/&gt;\n第二行文字\n</code></pre><p><strong>结果显示：</strong><br>第一行文字<br><br/><br>第二行文字</p>\n<hr>\n<h3 id=\"高亮文字\"><a href=\"#高亮文字\" class=\"headerlink\" title=\"高亮文字\"></a>高亮文字</h3><p><strong>md写法：</strong></p>\n<pre><code>`高亮`显示的`文字`\n</code></pre><p><strong>结果显示：</strong><br><code>高亮</code>显示的<code>文字</code></p>\n<hr>\n<h3 id=\"特别显示的文本块\"><a href=\"#特别显示的文本块\" class=\"headerlink\" title=\"特别显示的文本块\"></a>特别显示的文本块</h3><p><strong>md写法：</strong></p>\n<ul>\n<li><p>三个<code>·</code>+<code>bash</code>(或者java、javascript、php、html…) +换行+<code>代码块...</code>+换行+三个<code>·</code><br><strong>结果显示：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'obj'</span>);<span class=\"comment\">//javascript</span></div></pre></td></tr></table></figure>\n</li>\n<li><p>提示：此处的<code>·</code>是<code>英文输入法</code>下<code>Tab键</code>上边的那个字符，<code>+</code>号请忽略不要写。</p>\n</li>\n</ul>\n<hr>\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><p><strong>md写法：</strong></p>\n<pre><code>|表头1|表头2|表头3|\n|:---:|:---:|:---:|\n|con11|con22|con33|\n|con11|con22|con33|\n</code></pre><p><strong>结果显示：</strong></p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">表头1</th>\n<th style=\"text-align:center\">表头2</th>\n<th style=\"text-align:center\">表头3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">con11</td>\n<td style=\"text-align:center\">con22</td>\n<td style=\"text-align:center\">con33</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">con11</td>\n<td style=\"text-align:center\">con22</td>\n<td style=\"text-align:center\">con33</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>提示：此处的<code>:</code>相当于CSS中的<code>text-align</code>属性；<code>:</code>在左边就是文本<code>左对齐</code>；<code>:</code>在右边就是文本<code>右对齐</code>；如果两边都有，则本文<code>居中</code>显示(相当于text-align:center)。</li>\n</ul>\n<hr>\n<p><strong><em>提示：</em></strong></p>\n<ul>\n<li>一般Markdown文档都是以<code>.md</code>后缀结尾的。</li>\n<li>文中所有的<code>·</code>是<code>英文输入法</code>下<code>Tab键</code>上边的那个字符，<code>+</code>号请忽略不要写。（补充：高亮显示和特别显示中的<code>·</code>）;</li>\n<li>Markdown支持大部分<code>HTML标签</code>，可以直接写HTML标签，并能加<code>内联样式</code>。</li>\n<li>Markdown在各个地方解析的情况不同，因此结果显示会有所区别，有的平台不能解析表格。</li>\n<li>此文仅供参考，如有不详之处，望见谅。</li>\n</ul>"},{"title":"原生js获取css样式","date":"2017-03-10T08:10:33.000Z","_content":"在前端开发过程中往往需要动态的编辑、修改一个UI的样式，这必然涉及到style的获取与设置。\n一般都说有图有真相，而我们程序猿当然是用`demo`来说明一切，下面就根据一则具体事例探讨原生js获取`css`样式的方法。\n<!-- more -->\n* 事例\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>test</title>\n    <style>\n        #div1{\n            width: 200px;\n            background:#00f;\n            border: 1px solid #000;\n        }\n    </style>\n</head>\n<body>\n<div id=\"div1\" style=\"height:100px;\"></div>\n<script>\n    window.onload = function() {\n        var oDiv = document.getElementById('div1');\n        // div的width\n        console.log(oDiv.style.width);\n        // div的height\n        console.log(oDiv.style.height);\n    }\n</script>\n</body>\n</html>\n```\n经过浏览器运行之后，在`console控制台`很明显有输出。\n\n* 第一行是空白；\n* 第二行会输出`100px`。\n\n很多人不明白是怎么回事，想要获取的`width`怎么是空白。\n原来是因为直接用`oDiv.style`方法只能获取元素的`内联样式`，对于`内部样式`和`外联样式`，这种方法则不能取得。\n因此要另寻出路，众所周知，IE浏览器总是别具一格，格外奇葩，所以这里还得解决兼容性问题：\n* IE浏览器：\n```javascript\nvar oDiv = document.getElementById('div');\nvar styles = oDiv.currentStyle;\nstyles.width;\n```\n* 其他浏览器：\n```javascript\nvar oDiv = document.getElementById('div');\nvar style = window.getComputedStyle(oDiv, null);\nstyles.width;\n```\n* 封装方法：\n```javascript\nfunction getStyle(obj,attr){\n    return obj.currentStyle?obj.currentStyle[attr]:getComputedStyle(obj)[attr];\n}\n```\n**提示：**\n* 这个方法需要传两个参数，`obj`是将要获取样式的元素，`attr`则是样式的属性，如`width`、`color`等，调用此方法时attr必须要加上`引号`，不然会报错；\n* 此方法只能获取`单一属性`样式，像`border`、`background`等具有`综合属性`的样式，只有`chrome`浏览器能获取；而其他浏览器只能通过`borderStyleColor`这种`驼峰命名`的`单一属性`来取得；\n* 如果使用的是jQuery，则不需要如此操作，可直接用`$('obj').css('attr')`来获取，因为JQ的底层就是用`currentStyle[attr]`和`getComputedStyle(obj)[attr]`这种方法进行封装的。\n\n参考博文：\n* http://blog.csdn.net/u011043843/article/details/39811211\n* http://www.zhangxinxu.com/wordpress/2012/05/getcomputedstyle-js-getpropertyvalue-currentstyle/\n\n","source":"_posts/原生js获取css样式.md","raw":"---\ntitle: 原生js获取css样式\ndate: 2017-03-10 16:10:33\ntags:\n    - js\n---\n在前端开发过程中往往需要动态的编辑、修改一个UI的样式，这必然涉及到style的获取与设置。\n一般都说有图有真相，而我们程序猿当然是用`demo`来说明一切，下面就根据一则具体事例探讨原生js获取`css`样式的方法。\n<!-- more -->\n* 事例\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>test</title>\n    <style>\n        #div1{\n            width: 200px;\n            background:#00f;\n            border: 1px solid #000;\n        }\n    </style>\n</head>\n<body>\n<div id=\"div1\" style=\"height:100px;\"></div>\n<script>\n    window.onload = function() {\n        var oDiv = document.getElementById('div1');\n        // div的width\n        console.log(oDiv.style.width);\n        // div的height\n        console.log(oDiv.style.height);\n    }\n</script>\n</body>\n</html>\n```\n经过浏览器运行之后，在`console控制台`很明显有输出。\n\n* 第一行是空白；\n* 第二行会输出`100px`。\n\n很多人不明白是怎么回事，想要获取的`width`怎么是空白。\n原来是因为直接用`oDiv.style`方法只能获取元素的`内联样式`，对于`内部样式`和`外联样式`，这种方法则不能取得。\n因此要另寻出路，众所周知，IE浏览器总是别具一格，格外奇葩，所以这里还得解决兼容性问题：\n* IE浏览器：\n```javascript\nvar oDiv = document.getElementById('div');\nvar styles = oDiv.currentStyle;\nstyles.width;\n```\n* 其他浏览器：\n```javascript\nvar oDiv = document.getElementById('div');\nvar style = window.getComputedStyle(oDiv, null);\nstyles.width;\n```\n* 封装方法：\n```javascript\nfunction getStyle(obj,attr){\n    return obj.currentStyle?obj.currentStyle[attr]:getComputedStyle(obj)[attr];\n}\n```\n**提示：**\n* 这个方法需要传两个参数，`obj`是将要获取样式的元素，`attr`则是样式的属性，如`width`、`color`等，调用此方法时attr必须要加上`引号`，不然会报错；\n* 此方法只能获取`单一属性`样式，像`border`、`background`等具有`综合属性`的样式，只有`chrome`浏览器能获取；而其他浏览器只能通过`borderStyleColor`这种`驼峰命名`的`单一属性`来取得；\n* 如果使用的是jQuery，则不需要如此操作，可直接用`$('obj').css('attr')`来获取，因为JQ的底层就是用`currentStyle[attr]`和`getComputedStyle(obj)[attr]`这种方法进行封装的。\n\n参考博文：\n* http://blog.csdn.net/u011043843/article/details/39811211\n* http://www.zhangxinxu.com/wordpress/2012/05/getcomputedstyle-js-getpropertyvalue-currentstyle/\n\n","slug":"原生js获取css样式","published":1,"updated":"2017-03-25T07:50:23.589Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0s9eigt000bvgb90tkdge6b","content":"<p>在前端开发过程中往往需要动态的编辑、修改一个UI的样式，这必然涉及到style的获取与设置。<br>一般都说有图有真相，而我们程序猿当然是用<code>demo</code>来说明一切，下面就根据一则具体事例探讨原生js获取<code>css</code>样式的方法。<br><a id=\"more\"></a></p>\n<ul>\n<li>事例<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></span></div><div class=\"line\">        #div1&#123;</div><div class=\"line\">            width: 200px;</div><div class=\"line\">            background:#00f;</div><div class=\"line\">            border: 1px solid #000;</div><div class=\"line\">        &#125;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"div1\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height:100px;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></div><div class=\"line\">    <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> oDiv = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div1'</span>);</div><div class=\"line\">        <span class=\"comment\">// div的width</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(oDiv.style.width);</div><div class=\"line\">        <span class=\"comment\">// div的height</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(oDiv.style.height);</div><div class=\"line\">    &#125;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>经过浏览器运行之后，在<code>console控制台</code>很明显有输出。</p>\n<ul>\n<li>第一行是空白；</li>\n<li>第二行会输出<code>100px</code>。</li>\n</ul>\n<p>很多人不明白是怎么回事，想要获取的<code>width</code>怎么是空白。<br>原来是因为直接用<code>oDiv.style</code>方法只能获取元素的<code>内联样式</code>，对于<code>内部样式</code>和<code>外联样式</code>，这种方法则不能取得。<br>因此要另寻出路，众所周知，IE浏览器总是别具一格，格外奇葩，所以这里还得解决兼容性问题：</p>\n<ul>\n<li><p>IE浏览器：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> oDiv = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> styles = oDiv.currentStyle;</div><div class=\"line\">styles.width;</div></pre></td></tr></table></figure>\n</li>\n<li><p>其他浏览器：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> oDiv = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> style = <span class=\"built_in\">window</span>.getComputedStyle(oDiv, <span class=\"literal\">null</span>);</div><div class=\"line\">styles.width;</div></pre></td></tr></table></figure>\n</li>\n<li><p>封装方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getStyle</span>(<span class=\"params\">obj,attr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> obj.currentStyle?obj.currentStyle[attr]:getComputedStyle(obj)[attr];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>提示：</strong></p>\n<ul>\n<li>这个方法需要传两个参数，<code>obj</code>是将要获取样式的元素，<code>attr</code>则是样式的属性，如<code>width</code>、<code>color</code>等，调用此方法时attr必须要加上<code>引号</code>，不然会报错；</li>\n<li>此方法只能获取<code>单一属性</code>样式，像<code>border</code>、<code>background</code>等具有<code>综合属性</code>的样式，只有<code>chrome</code>浏览器能获取；而其他浏览器只能通过<code>borderStyleColor</code>这种<code>驼峰命名</code>的<code>单一属性</code>来取得；</li>\n<li>如果使用的是jQuery，则不需要如此操作，可直接用<code>$(&#39;obj&#39;).css(&#39;attr&#39;)</code>来获取，因为JQ的底层就是用<code>currentStyle[attr]</code>和<code>getComputedStyle(obj)[attr]</code>这种方法进行封装的。</li>\n</ul>\n<p>参考博文：</p>\n<ul>\n<li><a href=\"http://blog.csdn.net/u011043843/article/details/39811211\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/u011043843/article/details/39811211</a></li>\n<li><a href=\"http://www.zhangxinxu.com/wordpress/2012/05/getcomputedstyle-js-getpropertyvalue-currentstyle/\" target=\"_blank\" rel=\"external\">http://www.zhangxinxu.com/wordpress/2012/05/getcomputedstyle-js-getpropertyvalue-currentstyle/</a></li>\n</ul>\n","excerpt":"<p>在前端开发过程中往往需要动态的编辑、修改一个UI的样式，这必然涉及到style的获取与设置。<br>一般都说有图有真相，而我们程序猿当然是用<code>demo</code>来说明一切，下面就根据一则具体事例探讨原生js获取<code>css</code>样式的方法。<br>","more":"</p>\n<ul>\n<li>事例<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\"></div><div class=\"line\">        #div1&#123;</div><div class=\"line\">            width: 200px;</div><div class=\"line\">            background:#00f;</div><div class=\"line\">            border: 1px solid #000;</div><div class=\"line\">        &#125;</div><div class=\"line\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"div1\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"height:100px;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></div><div class=\"line\">    <span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> oDiv = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div1'</span>);</div><div class=\"line\">        <span class=\"comment\">// div的width</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(oDiv.style.width);</div><div class=\"line\">        <span class=\"comment\">// div的height</span></div><div class=\"line\">        <span class=\"built_in\">console</span>.log(oDiv.style.height);</div><div class=\"line\">    &#125;</div><div class=\"line\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>经过浏览器运行之后，在<code>console控制台</code>很明显有输出。</p>\n<ul>\n<li>第一行是空白；</li>\n<li>第二行会输出<code>100px</code>。</li>\n</ul>\n<p>很多人不明白是怎么回事，想要获取的<code>width</code>怎么是空白。<br>原来是因为直接用<code>oDiv.style</code>方法只能获取元素的<code>内联样式</code>，对于<code>内部样式</code>和<code>外联样式</code>，这种方法则不能取得。<br>因此要另寻出路，众所周知，IE浏览器总是别具一格，格外奇葩，所以这里还得解决兼容性问题：</p>\n<ul>\n<li><p>IE浏览器：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> oDiv = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> styles = oDiv.currentStyle;</div><div class=\"line\">styles.width;</div></pre></td></tr></table></figure>\n</li>\n<li><p>其他浏览器：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> oDiv = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'div'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> style = <span class=\"built_in\">window</span>.getComputedStyle(oDiv, <span class=\"literal\">null</span>);</div><div class=\"line\">styles.width;</div></pre></td></tr></table></figure>\n</li>\n<li><p>封装方法：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getStyle</span>(<span class=\"params\">obj,attr</span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> obj.currentStyle?obj.currentStyle[attr]:getComputedStyle(obj)[attr];</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>提示：</strong></p>\n<ul>\n<li>这个方法需要传两个参数，<code>obj</code>是将要获取样式的元素，<code>attr</code>则是样式的属性，如<code>width</code>、<code>color</code>等，调用此方法时attr必须要加上<code>引号</code>，不然会报错；</li>\n<li>此方法只能获取<code>单一属性</code>样式，像<code>border</code>、<code>background</code>等具有<code>综合属性</code>的样式，只有<code>chrome</code>浏览器能获取；而其他浏览器只能通过<code>borderStyleColor</code>这种<code>驼峰命名</code>的<code>单一属性</code>来取得；</li>\n<li>如果使用的是jQuery，则不需要如此操作，可直接用<code>$(&#39;obj&#39;).css(&#39;attr&#39;)</code>来获取，因为JQ的底层就是用<code>currentStyle[attr]</code>和<code>getComputedStyle(obj)[attr]</code>这种方法进行封装的。</li>\n</ul>\n<p>参考博文：</p>\n<ul>\n<li><a href=\"http://blog.csdn.net/u011043843/article/details/39811211\">http://blog.csdn.net/u011043843/article/details/39811211</a></li>\n<li><a href=\"http://www.zhangxinxu.com/wordpress/2012/05/getcomputedstyle-js-getpropertyvalue-currentstyle/\">http://www.zhangxinxu.com/wordpress/2012/05/getcomputedstyle-js-getpropertyvalue-currentstyle/</a></li>\n</ul>"},{"title":"学习webpack原来就是SoEasy","date":"2017-03-14T03:41:38.000Z","_content":"在前端大行其道的时代，不管是传统PC端应用，还是日益备受青睐的MobileAPP，功能越来越丰富，用户体验越来越好，必然导致业务逻辑越来越复杂，代码越来越多，客户端加载也是越来越慢。为了解决这些问题，便出现了如火如荼的`模块化`和一系列前端优化工具，[webpack](https://webpack.js.org/)就是优化工具其中之一。\n<!-- more -->\n[![webpack]](https://webpack.js.org)\n[webpack]:http://ohecg7vrp.bkt.clouddn.com/webpack_logo.jpg \"blog\"\n`webpack`是当下最热门的前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。本文就简单介绍webpack的基本使用和`config`配置。\n***前提：***windows下`node`和`npm`环境已经配置OK，`cmd命令行`中`node -v`和`npm -v`都能正常显示版本。\n# 安装\n---\n* 全局安装\n```javascript\n    npm i -g webpack\n```\n* 项目跟目录下创建`package.json`文件\n```javascript\n    npm init\n```\n* 项目`根目录`下安装webpack包依赖\n```bash\n    npm i webpack --save-dev    //执行命令后一路enter键就OK\n```\n* 示例目录结构：\n\n        demo/                       根目录\n            app/                    打包前的资源文件\n                entry.js            entry.js是入口文件\n                b.js                b.js是entry.js中引用的一个模块\n                css/                css文件资源\n                    style.css       style.css是entry.js中引用的css\n                    reset.css       reset.css是style.css中@import的公共样式\n            build/                  打包后的文件存放的文件夹\n            node_modules/           npm的依赖包\n            index.html              调试展现的页面\n            package.json            项目的基本信息、依赖包的版本\n\n* entry.js\n```javascript\n    // 引入app.js\n    var str = require('./b.js');\n    // 引入外部样式表\n    // 没有配置config的加载css的写法\n    /*require('!style-loader!css-loader!./css/style.css');*/\n    // 配置config之后的写法\n    require('./css/style.css');\n    document.body.innerHTML = '<h1>'+str+'</h1>';\n```\n* b.js\n```javascript\n    module.exports = 'zmnaer.com';\n```\n* style.css\n```javascript\n    h1{\n        color: #f00;\n        font-size: 40px;\n    }\n```\n* reset.css\n```javascript\n    *{\n        margin: 0;\n        padding: 0;\n    }\n    body{\n        background: #eee;\n    }\n```\n* 执行打包\n```bash\n    webpack app/entry build/build.js\n```\n执行结束后就会在`build`文件夹中生成打包后的`build.js`。\n\n---\n# webpack的`config`配置\n在根目录下新建`webpack-config.js`，之后可在命令中直接输入`webpack`执行打包。\n* 配置\n```javascript\n    var webpack = require('webpack');\n    var path = require('path');\n    module.exports = {\n        entry:'./app/entry.js', // 输出文件入口\n        output:{    // 输出路径\n            path:__dirname, // 取得当前目录路径\n            filename:'./build/build.js' // 输出文件路径、文件名\n        },\n        module:{    // 加载模块插件\n            loaders:[   // 加载器 插件\n                {\n                    test:/\\.css$/,  // 正则匹配css文件\n                    loader:['style-loader','css-loader'],   // style css 加载器，顺序不能颠倒，有依赖关系\n                    exclude:'/node_module/' // 排除的文件夹\n                    /*include:'/app/'       // 多个就用数组*/\n                }\n            ]\n        },\n        resolve:{\n            extensions:['','.css','.js','.jsx']\n        },\n        plugins:[   //插件\n            new webpack.BannerPlugin('This file is created by auto')\n        ]\n    };\n```\n---\n## 一、entry入口文件\n\n* entry配置\n    1. 只有一个入口文件时：是一个字符串，如：`entry:'./app/entry.js'`\n    2. 有两个及以上入口文件时：是一个对象\n        * a. 是数组时，是将多个模块打包成一个模块。依赖性最高的放在最后，如：`entry:[\"./app/a.js\",\".app/b.js\"]`\n        * b. 是键值对时，是需要分别打包多个模块，如：\n```bash\n    entry:{\n        module1:'./app/a.js',\n        module2:'./app/b.js',\n    }\n```\n\n---\n## 二、loaders（加载器）\n在commonJS、AMD、CMD规范下，前端编程逐渐趋向模块化。因此在开发过程中，模块化不仅仅只加载js模块，css、json等模块也同样运用此方法加载。\n而webpack默认只能加载js资源文件，如果想要加载其他文件资源，需要用到各种加载器。\n#### 1、style-loader和css-loader\n加载外联css文件\n* 安装\n\n        npm i --save-dev style-loader css-style\n\n* 配置\n\n        loaders:{\n            test:/\\.css$/,\n            loader:'style-loader!css-loader?modules'\n        }\n\n---\n#### 2、json-loader\n加载json文件\n* 安装\n\n        npm i --save-dev json-loader\n\n* 配置\n\n        loaders:{\n            test:/\\.json$/,\n            loader:'json-loader'\n        }\n\n---\n#### 3、babel-loader\n编译ES6的js文件以及react编译加载\n* 安装\n\n        npm i --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react\n        npm i --save-dev react react-dom\n\n* 配置\n\n        loader:{\n            test:/\\.js$/,\n            loader:\"babel-loader\",\n            exclude:\"/node_modules/\",\n            query:{\n                presets:[\"es2015\",\"react\"]\n            }\n        }\n\n* 注意：项目根目录必须创建`.babelrc`文件，内容如下：\n\n        {\"presets\":[\"es2015\"]}\n\n---\n#### 4、postcss-loader和autoprefixer（自动添加前缀的插件）\n* 安装\n\n        npm i --save-dev postcss-loader autoprefixer\n\n* 配置\n\n        loaders:{\n            test:/\\.css$/,\n            loader:\"style-loader!css-loader?module!postcss\"\n        },\n        postcss:{\n            require('autoprefixer') //调用autoprefixer插件\n        }\n\n---\n\n## 三、plugins（插件）\n### 1、HtmlWebpackPlugin\n* 这个插件可以帮助生成HTML，并且与打包后的`build.js`文件同目录。配置:\n        plugins: [new HtmlWebpackPlugin()]\n\n### 2、BannerPlugin\n* 这个插件能在打包后的js文件开头位置增加一个`头注释`。配置:\n        plugins:[new webpack.BannerPlugin('webpack file by zm.')]\n* 更多请参考：[官网Plugins](http://webpack.github.io/docs/using-plugins.html)\n\n---\n## 四、webpack-dev-server\nwebpack-dev-server是一个轻量级的服务器，修改文件源码后，自动刷新页面将修改同步到页面上。\n* 安装\n        npm i webpack-dev-server -g             // 全局安装\n        npm i webpack-dev-server --save-dev     // 项目根目录下安装\n***webpack命令参数：***\n* 编译的输出内容带有进度和颜色\n        webpack-dev-server --progress --color\n* 启动监听模式并自动打包\n        webpack-dev-server --watch\n* 设置端口号\n       webpack-dev-server --port 8080\n* 热加载并自动刷新\n       webpack-dev-server --hot --inline\n* 使用另一份配置文件（比如webpack.es6.config.js）来打包\n        webpack --config webpack.es6.config.js\n* 压缩混淆脚本\n        webpack -p\n* 生成map映射文件\n        webpack -d\n* 使用`webpack`命令打包时，默认是根据`webpcak.config.js`配置文件进行打包。有时因为开发需求，可能会配置多个不同的`config.js`文件进行不同的操作，如：`webpack.es6.config.js`、`webpack.react.config.js`，这样在执行操作的时候会添加以下参数：\n        webpack --config webpack.es6.config.js      // 针对es6语法\n        webpack --config webpack.react.config.js    // 针对react\n---\n\n## 五、package.json命令配置\n* 如果在命令行中要输入以下类似命令：\n        1）webpack-dev-server --port 3000 --hot --inline\n        2）webpack-dev-server --port 3000 --hot --inline --config webpack.es6.config.js\n        3）webpack-dev-server --port 3000 --hot --inline --config webpack.react.config.js\n每次打包或启动都要输入这么老长的命令，不免觉得过于繁琐，因此可在`package.json`中的`script`下配置相关属性值：\n\n        \"script\":{\n            \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",      // 默认\n            \"build\":\"webpack-dev-server --port 3000 --hot --inline\",       // 1\n            \"build-es6\":\"webpack-dev-server --port 3000 --hot --inline --config webpack.es6.config.js\",      // 2\n            \"build-react\":\"webpack-dev-server --port 3000 --hot --inline --config webpack.react.config.js\"      // 3\n        }\n之后就可以在命令行中输入短小精悍的命令执行相关操作：\n        1. npm run build\n        2. npm run build-es6\n        3. npm run build-react\n----\n\n*提示：*`i`是`install`的简写，推荐使用\n* 参考文档：\n0. http://webpack.github.io/docs/\n0. https://webpack.js.org/\n1. http://webpackdoc.com/\n2. http://www.cnblogs.com/haogj/p/5160821.html\n3. http://www.jb51.net/article/96646.htm\n\n* 不甚详细，多多包涵 ^-O=O-^","source":"_posts/学习Webpack原来就是SoEasy.md","raw":"---\ntitle: 学习webpack原来就是SoEasy\ndate: 2017-03-14 11:41:38\ntags:\n    - webpack\n    - js\n    - 前端优化\n---\n在前端大行其道的时代，不管是传统PC端应用，还是日益备受青睐的MobileAPP，功能越来越丰富，用户体验越来越好，必然导致业务逻辑越来越复杂，代码越来越多，客户端加载也是越来越慢。为了解决这些问题，便出现了如火如荼的`模块化`和一系列前端优化工具，[webpack](https://webpack.js.org/)就是优化工具其中之一。\n<!-- more -->\n[![webpack]](https://webpack.js.org)\n[webpack]:http://ohecg7vrp.bkt.clouddn.com/webpack_logo.jpg \"blog\"\n`webpack`是当下最热门的前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。本文就简单介绍webpack的基本使用和`config`配置。\n***前提：***windows下`node`和`npm`环境已经配置OK，`cmd命令行`中`node -v`和`npm -v`都能正常显示版本。\n# 安装\n---\n* 全局安装\n```javascript\n    npm i -g webpack\n```\n* 项目跟目录下创建`package.json`文件\n```javascript\n    npm init\n```\n* 项目`根目录`下安装webpack包依赖\n```bash\n    npm i webpack --save-dev    //执行命令后一路enter键就OK\n```\n* 示例目录结构：\n\n        demo/                       根目录\n            app/                    打包前的资源文件\n                entry.js            entry.js是入口文件\n                b.js                b.js是entry.js中引用的一个模块\n                css/                css文件资源\n                    style.css       style.css是entry.js中引用的css\n                    reset.css       reset.css是style.css中@import的公共样式\n            build/                  打包后的文件存放的文件夹\n            node_modules/           npm的依赖包\n            index.html              调试展现的页面\n            package.json            项目的基本信息、依赖包的版本\n\n* entry.js\n```javascript\n    // 引入app.js\n    var str = require('./b.js');\n    // 引入外部样式表\n    // 没有配置config的加载css的写法\n    /*require('!style-loader!css-loader!./css/style.css');*/\n    // 配置config之后的写法\n    require('./css/style.css');\n    document.body.innerHTML = '<h1>'+str+'</h1>';\n```\n* b.js\n```javascript\n    module.exports = 'zmnaer.com';\n```\n* style.css\n```javascript\n    h1{\n        color: #f00;\n        font-size: 40px;\n    }\n```\n* reset.css\n```javascript\n    *{\n        margin: 0;\n        padding: 0;\n    }\n    body{\n        background: #eee;\n    }\n```\n* 执行打包\n```bash\n    webpack app/entry build/build.js\n```\n执行结束后就会在`build`文件夹中生成打包后的`build.js`。\n\n---\n# webpack的`config`配置\n在根目录下新建`webpack-config.js`，之后可在命令中直接输入`webpack`执行打包。\n* 配置\n```javascript\n    var webpack = require('webpack');\n    var path = require('path');\n    module.exports = {\n        entry:'./app/entry.js', // 输出文件入口\n        output:{    // 输出路径\n            path:__dirname, // 取得当前目录路径\n            filename:'./build/build.js' // 输出文件路径、文件名\n        },\n        module:{    // 加载模块插件\n            loaders:[   // 加载器 插件\n                {\n                    test:/\\.css$/,  // 正则匹配css文件\n                    loader:['style-loader','css-loader'],   // style css 加载器，顺序不能颠倒，有依赖关系\n                    exclude:'/node_module/' // 排除的文件夹\n                    /*include:'/app/'       // 多个就用数组*/\n                }\n            ]\n        },\n        resolve:{\n            extensions:['','.css','.js','.jsx']\n        },\n        plugins:[   //插件\n            new webpack.BannerPlugin('This file is created by auto')\n        ]\n    };\n```\n---\n## 一、entry入口文件\n\n* entry配置\n    1. 只有一个入口文件时：是一个字符串，如：`entry:'./app/entry.js'`\n    2. 有两个及以上入口文件时：是一个对象\n        * a. 是数组时，是将多个模块打包成一个模块。依赖性最高的放在最后，如：`entry:[\"./app/a.js\",\".app/b.js\"]`\n        * b. 是键值对时，是需要分别打包多个模块，如：\n```bash\n    entry:{\n        module1:'./app/a.js',\n        module2:'./app/b.js',\n    }\n```\n\n---\n## 二、loaders（加载器）\n在commonJS、AMD、CMD规范下，前端编程逐渐趋向模块化。因此在开发过程中，模块化不仅仅只加载js模块，css、json等模块也同样运用此方法加载。\n而webpack默认只能加载js资源文件，如果想要加载其他文件资源，需要用到各种加载器。\n#### 1、style-loader和css-loader\n加载外联css文件\n* 安装\n\n        npm i --save-dev style-loader css-style\n\n* 配置\n\n        loaders:{\n            test:/\\.css$/,\n            loader:'style-loader!css-loader?modules'\n        }\n\n---\n#### 2、json-loader\n加载json文件\n* 安装\n\n        npm i --save-dev json-loader\n\n* 配置\n\n        loaders:{\n            test:/\\.json$/,\n            loader:'json-loader'\n        }\n\n---\n#### 3、babel-loader\n编译ES6的js文件以及react编译加载\n* 安装\n\n        npm i --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react\n        npm i --save-dev react react-dom\n\n* 配置\n\n        loader:{\n            test:/\\.js$/,\n            loader:\"babel-loader\",\n            exclude:\"/node_modules/\",\n            query:{\n                presets:[\"es2015\",\"react\"]\n            }\n        }\n\n* 注意：项目根目录必须创建`.babelrc`文件，内容如下：\n\n        {\"presets\":[\"es2015\"]}\n\n---\n#### 4、postcss-loader和autoprefixer（自动添加前缀的插件）\n* 安装\n\n        npm i --save-dev postcss-loader autoprefixer\n\n* 配置\n\n        loaders:{\n            test:/\\.css$/,\n            loader:\"style-loader!css-loader?module!postcss\"\n        },\n        postcss:{\n            require('autoprefixer') //调用autoprefixer插件\n        }\n\n---\n\n## 三、plugins（插件）\n### 1、HtmlWebpackPlugin\n* 这个插件可以帮助生成HTML，并且与打包后的`build.js`文件同目录。配置:\n        plugins: [new HtmlWebpackPlugin()]\n\n### 2、BannerPlugin\n* 这个插件能在打包后的js文件开头位置增加一个`头注释`。配置:\n        plugins:[new webpack.BannerPlugin('webpack file by zm.')]\n* 更多请参考：[官网Plugins](http://webpack.github.io/docs/using-plugins.html)\n\n---\n## 四、webpack-dev-server\nwebpack-dev-server是一个轻量级的服务器，修改文件源码后，自动刷新页面将修改同步到页面上。\n* 安装\n        npm i webpack-dev-server -g             // 全局安装\n        npm i webpack-dev-server --save-dev     // 项目根目录下安装\n***webpack命令参数：***\n* 编译的输出内容带有进度和颜色\n        webpack-dev-server --progress --color\n* 启动监听模式并自动打包\n        webpack-dev-server --watch\n* 设置端口号\n       webpack-dev-server --port 8080\n* 热加载并自动刷新\n       webpack-dev-server --hot --inline\n* 使用另一份配置文件（比如webpack.es6.config.js）来打包\n        webpack --config webpack.es6.config.js\n* 压缩混淆脚本\n        webpack -p\n* 生成map映射文件\n        webpack -d\n* 使用`webpack`命令打包时，默认是根据`webpcak.config.js`配置文件进行打包。有时因为开发需求，可能会配置多个不同的`config.js`文件进行不同的操作，如：`webpack.es6.config.js`、`webpack.react.config.js`，这样在执行操作的时候会添加以下参数：\n        webpack --config webpack.es6.config.js      // 针对es6语法\n        webpack --config webpack.react.config.js    // 针对react\n---\n\n## 五、package.json命令配置\n* 如果在命令行中要输入以下类似命令：\n        1）webpack-dev-server --port 3000 --hot --inline\n        2）webpack-dev-server --port 3000 --hot --inline --config webpack.es6.config.js\n        3）webpack-dev-server --port 3000 --hot --inline --config webpack.react.config.js\n每次打包或启动都要输入这么老长的命令，不免觉得过于繁琐，因此可在`package.json`中的`script`下配置相关属性值：\n\n        \"script\":{\n            \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",      // 默认\n            \"build\":\"webpack-dev-server --port 3000 --hot --inline\",       // 1\n            \"build-es6\":\"webpack-dev-server --port 3000 --hot --inline --config webpack.es6.config.js\",      // 2\n            \"build-react\":\"webpack-dev-server --port 3000 --hot --inline --config webpack.react.config.js\"      // 3\n        }\n之后就可以在命令行中输入短小精悍的命令执行相关操作：\n        1. npm run build\n        2. npm run build-es6\n        3. npm run build-react\n----\n\n*提示：*`i`是`install`的简写，推荐使用\n* 参考文档：\n0. http://webpack.github.io/docs/\n0. https://webpack.js.org/\n1. http://webpackdoc.com/\n2. http://www.cnblogs.com/haogj/p/5160821.html\n3. http://www.jb51.net/article/96646.htm\n\n* 不甚详细，多多包涵 ^-O=O-^","slug":"学习Webpack原来就是SoEasy","published":1,"updated":"2017-03-25T08:38:18.319Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0s9eigu000cvgb9t7q5fyfp","content":"<p>在前端大行其道的时代，不管是传统PC端应用，还是日益备受青睐的MobileAPP，功能越来越丰富，用户体验越来越好，必然导致业务逻辑越来越复杂，代码越来越多，客户端加载也是越来越慢。为了解决这些问题，便出现了如火如荼的<code>模块化</code>和一系列前端优化工具，<a href=\"https://webpack.js.org/\" target=\"_blank\" rel=\"external\">webpack</a>就是优化工具其中之一。<br><a id=\"more\"></a><br><a href=\"https://webpack.js.org\" target=\"_blank\" rel=\"external\"><img src=\"http://ohecg7vrp.bkt.clouddn.com/webpack_logo.jpg\" alt=\"webpack\" title=\"blog\"></a></p>\n<p><code>webpack</code>是当下最热门的前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。本文就简单介绍webpack的基本使用和<code>config</code>配置。<br><strong><em>前提：</em></strong>windows下<code>node</code>和<code>npm</code>环境已经配置OK，<code>cmd命令行</code>中<code>node -v</code>和<code>npm -v</code>都能正常显示版本。</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><hr>\n<ul>\n<li><p>全局安装</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm i -g webpack</div></pre></td></tr></table></figure>\n</li>\n<li><p>项目跟目录下创建<code>package.json</code>文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm init</div></pre></td></tr></table></figure>\n</li>\n<li><p>项目<code>根目录</code>下安装webpack包依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm i webpack --save-dev    //执行命令后一路enter键就OK</div></pre></td></tr></table></figure>\n</li>\n<li><p>示例目录结构：</p>\n<pre><code>demo/                       根目录\n    app/                    打包前的资源文件\n        entry.js            entry.js是入口文件\n        b.js                b.js是entry.js中引用的一个模块\n        css/                css文件资源\n            style.css       style.css是entry.js中引用的css\n            reset.css       reset.css是style.css中@import的公共样式\n    build/                  打包后的文件存放的文件夹\n    node_modules/           npm的依赖包\n    index.html              调试展现的页面\n    package.json            项目的基本信息、依赖包的版本\n</code></pre></li>\n<li><p>entry.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 引入app.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"built_in\">require</span>(<span class=\"string\">'./b.js'</span>);</div><div class=\"line\"><span class=\"comment\">// 引入外部样式表</span></div><div class=\"line\"><span class=\"comment\">// 没有配置config的加载css的写法</span></div><div class=\"line\"><span class=\"comment\">/*require('!style-loader!css-loader!./css/style.css');*/</span></div><div class=\"line\"><span class=\"comment\">// 配置config之后的写法</span></div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./css/style.css'</span>);</div><div class=\"line\"><span class=\"built_in\">document</span>.body.innerHTML = <span class=\"string\">'&lt;h1&gt;'</span>+str+<span class=\"string\">'&lt;/h1&gt;'</span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>b.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"string\">'zmnaer.com'</span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>style.css</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">h1&#123;</div><div class=\"line\">    color: #f00;</div><div class=\"line\">    font-size: 40px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>reset.css</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">*&#123;</div><div class=\"line\">    margin: 0;</div><div class=\"line\">    padding: 0;</div><div class=\"line\">&#125;</div><div class=\"line\">body&#123;</div><div class=\"line\">    background: #eee;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>执行打包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webpack app/entry build/build.js</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>执行结束后就会在<code>build</code>文件夹中生成打包后的<code>build.js</code>。</p>\n<hr>\n<h1 id=\"webpack的config配置\"><a href=\"#webpack的config配置\" class=\"headerlink\" title=\"webpack的config配置\"></a>webpack的<code>config</code>配置</h1><p>在根目录下新建<code>webpack-config.js</code>，之后可在命令中直接输入<code>webpack</code>执行打包。</p>\n<ul>\n<li>配置<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"attr\">entry</span>:<span class=\"string\">'./app/entry.js'</span>, <span class=\"comment\">// 输出文件入口</span></div><div class=\"line\">    output:&#123;    <span class=\"comment\">// 输出路径</span></div><div class=\"line\">        path:__dirname, <span class=\"comment\">// 取得当前目录路径</span></div><div class=\"line\">        filename:<span class=\"string\">'./build/build.js'</span> <span class=\"comment\">// 输出文件路径、文件名</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">module</span>:&#123;    <span class=\"comment\">// 加载模块插件</span></div><div class=\"line\">        loaders:[   <span class=\"comment\">// 加载器 插件</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">test</span>:<span class=\"regexp\">/\\.css$/</span>,  <span class=\"comment\">// 正则匹配css文件</span></div><div class=\"line\">                loader:[<span class=\"string\">'style-loader'</span>,<span class=\"string\">'css-loader'</span>],   <span class=\"comment\">// style css 加载器，顺序不能颠倒，有依赖关系</span></div><div class=\"line\">                exclude:<span class=\"string\">'/node_module/'</span> <span class=\"comment\">// 排除的文件夹</span></div><div class=\"line\">                <span class=\"comment\">/*include:'/app/'       // 多个就用数组*/</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">resolve</span>:&#123;</div><div class=\"line\">        <span class=\"attr\">extensions</span>:[<span class=\"string\">''</span>,<span class=\"string\">'.css'</span>,<span class=\"string\">'.js'</span>,<span class=\"string\">'.jsx'</span>]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">plugins</span>:[   <span class=\"comment\">//插件</span></div><div class=\"line\">        <span class=\"keyword\">new</span> webpack.BannerPlugin(<span class=\"string\">'This file is created by auto'</span>)</div><div class=\"line\">    ]</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"一、entry入口文件\"><a href=\"#一、entry入口文件\" class=\"headerlink\" title=\"一、entry入口文件\"></a>一、entry入口文件</h2><ul>\n<li>entry配置<ol>\n<li>只有一个入口文件时：是一个字符串，如：<code>entry:&#39;./app/entry.js&#39;</code></li>\n<li>有两个及以上入口文件时：是一个对象<ul>\n<li>a. 是数组时，是将多个模块打包成一个模块。依赖性最高的放在最后，如：<code>entry:[&quot;./app/a.js&quot;,&quot;.app/b.js&quot;]</code></li>\n<li>b. 是键值对时，是需要分别打包多个模块，如：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">entry:&#123;</div><div class=\"line\">    module1:<span class=\"string\">'./app/a.js'</span>,</div><div class=\"line\">    module2:<span class=\"string\">'./app/b.js'</span>,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2 id=\"二、loaders（加载器）\"><a href=\"#二、loaders（加载器）\" class=\"headerlink\" title=\"二、loaders（加载器）\"></a>二、loaders（加载器）</h2><p>在commonJS、AMD、CMD规范下，前端编程逐渐趋向模块化。因此在开发过程中，模块化不仅仅只加载js模块，css、json等模块也同样运用此方法加载。<br>而webpack默认只能加载js资源文件，如果想要加载其他文件资源，需要用到各种加载器。</p>\n<h4 id=\"1、style-loader和css-loader\"><a href=\"#1、style-loader和css-loader\" class=\"headerlink\" title=\"1、style-loader和css-loader\"></a>1、style-loader和css-loader</h4><p>加载外联css文件</p>\n<ul>\n<li><p>安装</p>\n<pre><code>npm i --save-dev style-loader css-style\n</code></pre></li>\n<li><p>配置</p>\n<pre><code>loaders:{\n    test:/\\.css$/,\n    loader:&apos;style-loader!css-loader?modules&apos;\n}\n</code></pre></li>\n</ul>\n<hr>\n<h4 id=\"2、json-loader\"><a href=\"#2、json-loader\" class=\"headerlink\" title=\"2、json-loader\"></a>2、json-loader</h4><p>加载json文件</p>\n<ul>\n<li><p>安装</p>\n<pre><code>npm i --save-dev json-loader\n</code></pre></li>\n<li><p>配置</p>\n<pre><code>loaders:{\n    test:/\\.json$/,\n    loader:&apos;json-loader&apos;\n}\n</code></pre></li>\n</ul>\n<hr>\n<h4 id=\"3、babel-loader\"><a href=\"#3、babel-loader\" class=\"headerlink\" title=\"3、babel-loader\"></a>3、babel-loader</h4><p>编译ES6的js文件以及react编译加载</p>\n<ul>\n<li><p>安装</p>\n<pre><code>npm i --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react\nnpm i --save-dev react react-dom\n</code></pre></li>\n<li><p>配置</p>\n<pre><code>loader:{\n    test:/\\.js$/,\n    loader:&quot;babel-loader&quot;,\n    exclude:&quot;/node_modules/&quot;,\n    query:{\n        presets:[&quot;es2015&quot;,&quot;react&quot;]\n    }\n}\n</code></pre></li>\n<li><p>注意：项目根目录必须创建<code>.babelrc</code>文件，内容如下：</p>\n<pre><code>{&quot;presets&quot;:[&quot;es2015&quot;]}\n</code></pre></li>\n</ul>\n<hr>\n<h4 id=\"4、postcss-loader和autoprefixer（自动添加前缀的插件）\"><a href=\"#4、postcss-loader和autoprefixer（自动添加前缀的插件）\" class=\"headerlink\" title=\"4、postcss-loader和autoprefixer（自动添加前缀的插件）\"></a>4、postcss-loader和autoprefixer（自动添加前缀的插件）</h4><ul>\n<li><p>安装</p>\n<pre><code>npm i --save-dev postcss-loader autoprefixer\n</code></pre></li>\n<li><p>配置</p>\n<pre><code>loaders:{\n    test:/\\.css$/,\n    loader:&quot;style-loader!css-loader?module!postcss&quot;\n},\npostcss:{\n    require(&apos;autoprefixer&apos;) //调用autoprefixer插件\n}\n</code></pre></li>\n</ul>\n<hr>\n<h2 id=\"三、plugins（插件）\"><a href=\"#三、plugins（插件）\" class=\"headerlink\" title=\"三、plugins（插件）\"></a>三、plugins（插件）</h2><h3 id=\"1、HtmlWebpackPlugin\"><a href=\"#1、HtmlWebpackPlugin\" class=\"headerlink\" title=\"1、HtmlWebpackPlugin\"></a>1、HtmlWebpackPlugin</h3><ul>\n<li>这个插件可以帮助生成HTML，并且与打包后的<code>build.js</code>文件同目录。配置:<pre><code>plugins: [new HtmlWebpackPlugin()]\n</code></pre></li>\n</ul>\n<h3 id=\"2、BannerPlugin\"><a href=\"#2、BannerPlugin\" class=\"headerlink\" title=\"2、BannerPlugin\"></a>2、BannerPlugin</h3><ul>\n<li>这个插件能在打包后的js文件开头位置增加一个<code>头注释</code>。配置:<pre><code>plugins:[new webpack.BannerPlugin(&apos;webpack file by zm.&apos;)]\n</code></pre></li>\n<li>更多请参考：<a href=\"http://webpack.github.io/docs/using-plugins.html\" target=\"_blank\" rel=\"external\">官网Plugins</a></li>\n</ul>\n<hr>\n<h2 id=\"四、webpack-dev-server\"><a href=\"#四、webpack-dev-server\" class=\"headerlink\" title=\"四、webpack-dev-server\"></a>四、webpack-dev-server</h2><p>webpack-dev-server是一个轻量级的服务器，修改文件源码后，自动刷新页面将修改同步到页面上。</p>\n<ul>\n<li>安装<pre><code>npm i webpack-dev-server -g             // 全局安装\nnpm i webpack-dev-server --save-dev     // 项目根目录下安装\n</code></pre><strong><em>webpack命令参数：</em></strong></li>\n<li>编译的输出内容带有进度和颜色<pre><code>webpack-dev-server --progress --color\n</code></pre></li>\n<li>启动监听模式并自动打包<pre><code>webpack-dev-server --watch\n</code></pre></li>\n<li>设置端口号<pre><code>webpack-dev-server --port 8080\n</code></pre></li>\n<li>热加载并自动刷新<pre><code>webpack-dev-server --hot --inline\n</code></pre></li>\n<li>使用另一份配置文件（比如webpack.es6.config.js）来打包<pre><code>webpack --config webpack.es6.config.js\n</code></pre></li>\n<li>压缩混淆脚本<pre><code>webpack -p\n</code></pre></li>\n<li>生成map映射文件<pre><code>webpack -d\n</code></pre></li>\n<li>使用<code>webpack</code>命令打包时，默认是根据<code>webpcak.config.js</code>配置文件进行打包。有时因为开发需求，可能会配置多个不同的<code>config.js</code>文件进行不同的操作，如：<code>webpack.es6.config.js</code>、<code>webpack.react.config.js</code>，这样在执行操作的时候会添加以下参数：<pre><code>webpack --config webpack.es6.config.js      // 针对es6语法\nwebpack --config webpack.react.config.js    // 针对react\n</code></pre></li>\n</ul>\n<hr>\n<h2 id=\"五、package-json命令配置\"><a href=\"#五、package-json命令配置\" class=\"headerlink\" title=\"五、package.json命令配置\"></a>五、package.json命令配置</h2><ul>\n<li><p>如果在命令行中要输入以下类似命令：</p>\n<pre><code>1）webpack-dev-server --port 3000 --hot --inline\n2）webpack-dev-server --port 3000 --hot --inline --config webpack.es6.config.js\n3）webpack-dev-server --port 3000 --hot --inline --config webpack.react.config.js\n</code></pre><p>每次打包或启动都要输入这么老长的命令，不免觉得过于繁琐，因此可在<code>package.json</code>中的<code>script</code>下配置相关属性值：</p>\n<pre><code>&quot;script&quot;:{\n    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,      // 默认\n    &quot;build&quot;:&quot;webpack-dev-server --port 3000 --hot --inline&quot;,       // 1\n    &quot;build-es6&quot;:&quot;webpack-dev-server --port 3000 --hot --inline --config webpack.es6.config.js&quot;,      // 2\n    &quot;build-react&quot;:&quot;webpack-dev-server --port 3000 --hot --inline --config webpack.react.config.js&quot;      // 3\n}\n</code></pre><p>之后就可以在命令行中输入短小精悍的命令执行相关操作：</p>\n<pre><code>1. npm run build\n2. npm run build-es6\n3. npm run build-react\n</code></pre></li>\n</ul>\n<hr>\n<p><em>提示：</em><code>i</code>是<code>install</code>的简写，推荐使用</p>\n<ul>\n<li>参考文档：</li>\n</ul>\n<ol>\n<li><a href=\"http://webpack.github.io/docs/\" target=\"_blank\" rel=\"external\">http://webpack.github.io/docs/</a></li>\n<li><a href=\"https://webpack.js.org/\" target=\"_blank\" rel=\"external\">https://webpack.js.org/</a></li>\n<li><a href=\"http://webpackdoc.com/\" target=\"_blank\" rel=\"external\">http://webpackdoc.com/</a></li>\n<li><a href=\"http://www.cnblogs.com/haogj/p/5160821.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/haogj/p/5160821.html</a></li>\n<li><a href=\"http://www.jb51.net/article/96646.htm\" target=\"_blank\" rel=\"external\">http://www.jb51.net/article/96646.htm</a></li>\n</ol>\n<ul>\n<li>不甚详细，多多包涵 ^-O=O-^</li>\n</ul>\n","excerpt":"<p>在前端大行其道的时代，不管是传统PC端应用，还是日益备受青睐的MobileAPP，功能越来越丰富，用户体验越来越好，必然导致业务逻辑越来越复杂，代码越来越多，客户端加载也是越来越慢。为了解决这些问题，便出现了如火如荼的<code>模块化</code>和一系列前端优化工具，<a href=\"https://webpack.js.org/\">webpack</a>就是优化工具其中之一。<br>","more":"<br><a href=\"https://webpack.js.org\"><img src=\"http://ohecg7vrp.bkt.clouddn.com/webpack_logo.jpg\" alt=\"webpack\" title=\"blog\"></a></p>\n<p><code>webpack</code>是当下最热门的前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。本文就简单介绍webpack的基本使用和<code>config</code>配置。<br><strong><em>前提：</em></strong>windows下<code>node</code>和<code>npm</code>环境已经配置OK，<code>cmd命令行</code>中<code>node -v</code>和<code>npm -v</code>都能正常显示版本。</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><hr>\n<ul>\n<li><p>全局安装</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm i -g webpack</div></pre></td></tr></table></figure>\n</li>\n<li><p>项目跟目录下创建<code>package.json</code>文件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm init</div></pre></td></tr></table></figure>\n</li>\n<li><p>项目<code>根目录</code>下安装webpack包依赖</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm i webpack --save-dev    //执行命令后一路enter键就OK</div></pre></td></tr></table></figure>\n</li>\n<li><p>示例目录结构：</p>\n<pre><code>demo/                       根目录\n    app/                    打包前的资源文件\n        entry.js            entry.js是入口文件\n        b.js                b.js是entry.js中引用的一个模块\n        css/                css文件资源\n            style.css       style.css是entry.js中引用的css\n            reset.css       reset.css是style.css中@import的公共样式\n    build/                  打包后的文件存放的文件夹\n    node_modules/           npm的依赖包\n    index.html              调试展现的页面\n    package.json            项目的基本信息、依赖包的版本\n</code></pre></li>\n<li><p>entry.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// 引入app.js</span></div><div class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"built_in\">require</span>(<span class=\"string\">'./b.js'</span>);</div><div class=\"line\"><span class=\"comment\">// 引入外部样式表</span></div><div class=\"line\"><span class=\"comment\">// 没有配置config的加载css的写法</span></div><div class=\"line\"><span class=\"comment\">/*require('!style-loader!css-loader!./css/style.css');*/</span></div><div class=\"line\"><span class=\"comment\">// 配置config之后的写法</span></div><div class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'./css/style.css'</span>);</div><div class=\"line\"><span class=\"built_in\">document</span>.body.innerHTML = <span class=\"string\">'&lt;h1&gt;'</span>+str+<span class=\"string\">'&lt;/h1&gt;'</span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>b.js</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"string\">'zmnaer.com'</span>;</div></pre></td></tr></table></figure>\n</li>\n<li><p>style.css</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">h1&#123;</div><div class=\"line\">    color: #f00;</div><div class=\"line\">    font-size: 40px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>reset.css</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">*&#123;</div><div class=\"line\">    margin: 0;</div><div class=\"line\">    padding: 0;</div><div class=\"line\">&#125;</div><div class=\"line\">body&#123;</div><div class=\"line\">    background: #eee;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>执行打包</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">webpack app/entry build/build.js</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>执行结束后就会在<code>build</code>文件夹中生成打包后的<code>build.js</code>。</p>\n<hr>\n<h1 id=\"webpack的config配置\"><a href=\"#webpack的config配置\" class=\"headerlink\" title=\"webpack的config配置\"></a>webpack的<code>config</code>配置</h1><p>在根目录下新建<code>webpack-config.js</code>，之后可在命令中直接输入<code>webpack</code>执行打包。</p>\n<ul>\n<li>配置<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</div><div class=\"line\"><span class=\"keyword\">var</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</div><div class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</div><div class=\"line\">    <span class=\"attr\">entry</span>:<span class=\"string\">'./app/entry.js'</span>, <span class=\"comment\">// 输出文件入口</span></div><div class=\"line\">    output:&#123;    <span class=\"comment\">// 输出路径</span></div><div class=\"line\">        path:__dirname, <span class=\"comment\">// 取得当前目录路径</span></div><div class=\"line\">        filename:<span class=\"string\">'./build/build.js'</span> <span class=\"comment\">// 输出文件路径、文件名</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">module</span>:&#123;    <span class=\"comment\">// 加载模块插件</span></div><div class=\"line\">        loaders:[   <span class=\"comment\">// 加载器 插件</span></div><div class=\"line\">            &#123;</div><div class=\"line\">                <span class=\"attr\">test</span>:<span class=\"regexp\">/\\.css$/</span>,  <span class=\"comment\">// 正则匹配css文件</span></div><div class=\"line\">                loader:[<span class=\"string\">'style-loader'</span>,<span class=\"string\">'css-loader'</span>],   <span class=\"comment\">// style css 加载器，顺序不能颠倒，有依赖关系</span></div><div class=\"line\">                exclude:<span class=\"string\">'/node_module/'</span> <span class=\"comment\">// 排除的文件夹</span></div><div class=\"line\">                <span class=\"comment\">/*include:'/app/'       // 多个就用数组*/</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        ]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">resolve</span>:&#123;</div><div class=\"line\">        <span class=\"attr\">extensions</span>:[<span class=\"string\">''</span>,<span class=\"string\">'.css'</span>,<span class=\"string\">'.js'</span>,<span class=\"string\">'.jsx'</span>]</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">plugins</span>:[   <span class=\"comment\">//插件</span></div><div class=\"line\">        <span class=\"keyword\">new</span> webpack.BannerPlugin(<span class=\"string\">'This file is created by auto'</span>)</div><div class=\"line\">    ]</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"一、entry入口文件\"><a href=\"#一、entry入口文件\" class=\"headerlink\" title=\"一、entry入口文件\"></a>一、entry入口文件</h2><ul>\n<li>entry配置<ol>\n<li>只有一个入口文件时：是一个字符串，如：<code>entry:&#39;./app/entry.js&#39;</code></li>\n<li>有两个及以上入口文件时：是一个对象<ul>\n<li>a. 是数组时，是将多个模块打包成一个模块。依赖性最高的放在最后，如：<code>entry:[&quot;./app/a.js&quot;,&quot;.app/b.js&quot;]</code></li>\n<li>b. 是键值对时，是需要分别打包多个模块，如：<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">entry:&#123;</div><div class=\"line\">    module1:<span class=\"string\">'./app/a.js'</span>,</div><div class=\"line\">    module2:<span class=\"string\">'./app/b.js'</span>,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<hr>\n<h2 id=\"二、loaders（加载器）\"><a href=\"#二、loaders（加载器）\" class=\"headerlink\" title=\"二、loaders（加载器）\"></a>二、loaders（加载器）</h2><p>在commonJS、AMD、CMD规范下，前端编程逐渐趋向模块化。因此在开发过程中，模块化不仅仅只加载js模块，css、json等模块也同样运用此方法加载。<br>而webpack默认只能加载js资源文件，如果想要加载其他文件资源，需要用到各种加载器。</p>\n<h4 id=\"1、style-loader和css-loader\"><a href=\"#1、style-loader和css-loader\" class=\"headerlink\" title=\"1、style-loader和css-loader\"></a>1、style-loader和css-loader</h4><p>加载外联css文件</p>\n<ul>\n<li><p>安装</p>\n<pre><code>npm i --save-dev style-loader css-style\n</code></pre></li>\n<li><p>配置</p>\n<pre><code>loaders:{\n    test:/\\.css$/,\n    loader:&apos;style-loader!css-loader?modules&apos;\n}\n</code></pre></li>\n</ul>\n<hr>\n<h4 id=\"2、json-loader\"><a href=\"#2、json-loader\" class=\"headerlink\" title=\"2、json-loader\"></a>2、json-loader</h4><p>加载json文件</p>\n<ul>\n<li><p>安装</p>\n<pre><code>npm i --save-dev json-loader\n</code></pre></li>\n<li><p>配置</p>\n<pre><code>loaders:{\n    test:/\\.json$/,\n    loader:&apos;json-loader&apos;\n}\n</code></pre></li>\n</ul>\n<hr>\n<h4 id=\"3、babel-loader\"><a href=\"#3、babel-loader\" class=\"headerlink\" title=\"3、babel-loader\"></a>3、babel-loader</h4><p>编译ES6的js文件以及react编译加载</p>\n<ul>\n<li><p>安装</p>\n<pre><code>npm i --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react\nnpm i --save-dev react react-dom\n</code></pre></li>\n<li><p>配置</p>\n<pre><code>loader:{\n    test:/\\.js$/,\n    loader:&quot;babel-loader&quot;,\n    exclude:&quot;/node_modules/&quot;,\n    query:{\n        presets:[&quot;es2015&quot;,&quot;react&quot;]\n    }\n}\n</code></pre></li>\n<li><p>注意：项目根目录必须创建<code>.babelrc</code>文件，内容如下：</p>\n<pre><code>{&quot;presets&quot;:[&quot;es2015&quot;]}\n</code></pre></li>\n</ul>\n<hr>\n<h4 id=\"4、postcss-loader和autoprefixer（自动添加前缀的插件）\"><a href=\"#4、postcss-loader和autoprefixer（自动添加前缀的插件）\" class=\"headerlink\" title=\"4、postcss-loader和autoprefixer（自动添加前缀的插件）\"></a>4、postcss-loader和autoprefixer（自动添加前缀的插件）</h4><ul>\n<li><p>安装</p>\n<pre><code>npm i --save-dev postcss-loader autoprefixer\n</code></pre></li>\n<li><p>配置</p>\n<pre><code>loaders:{\n    test:/\\.css$/,\n    loader:&quot;style-loader!css-loader?module!postcss&quot;\n},\npostcss:{\n    require(&apos;autoprefixer&apos;) //调用autoprefixer插件\n}\n</code></pre></li>\n</ul>\n<hr>\n<h2 id=\"三、plugins（插件）\"><a href=\"#三、plugins（插件）\" class=\"headerlink\" title=\"三、plugins（插件）\"></a>三、plugins（插件）</h2><h3 id=\"1、HtmlWebpackPlugin\"><a href=\"#1、HtmlWebpackPlugin\" class=\"headerlink\" title=\"1、HtmlWebpackPlugin\"></a>1、HtmlWebpackPlugin</h3><ul>\n<li>这个插件可以帮助生成HTML，并且与打包后的<code>build.js</code>文件同目录。配置:<pre><code>plugins: [new HtmlWebpackPlugin()]\n</code></pre></li>\n</ul>\n<h3 id=\"2、BannerPlugin\"><a href=\"#2、BannerPlugin\" class=\"headerlink\" title=\"2、BannerPlugin\"></a>2、BannerPlugin</h3><ul>\n<li>这个插件能在打包后的js文件开头位置增加一个<code>头注释</code>。配置:<pre><code>plugins:[new webpack.BannerPlugin(&apos;webpack file by zm.&apos;)]\n</code></pre></li>\n<li>更多请参考：<a href=\"http://webpack.github.io/docs/using-plugins.html\">官网Plugins</a></li>\n</ul>\n<hr>\n<h2 id=\"四、webpack-dev-server\"><a href=\"#四、webpack-dev-server\" class=\"headerlink\" title=\"四、webpack-dev-server\"></a>四、webpack-dev-server</h2><p>webpack-dev-server是一个轻量级的服务器，修改文件源码后，自动刷新页面将修改同步到页面上。</p>\n<ul>\n<li>安装<pre><code>npm i webpack-dev-server -g             // 全局安装\nnpm i webpack-dev-server --save-dev     // 项目根目录下安装\n</code></pre><strong><em>webpack命令参数：</em></strong></li>\n<li>编译的输出内容带有进度和颜色<pre><code>webpack-dev-server --progress --color\n</code></pre></li>\n<li>启动监听模式并自动打包<pre><code>webpack-dev-server --watch\n</code></pre></li>\n<li>设置端口号<pre><code>webpack-dev-server --port 8080\n</code></pre></li>\n<li>热加载并自动刷新<pre><code>webpack-dev-server --hot --inline\n</code></pre></li>\n<li>使用另一份配置文件（比如webpack.es6.config.js）来打包<pre><code>webpack --config webpack.es6.config.js\n</code></pre></li>\n<li>压缩混淆脚本<pre><code>webpack -p\n</code></pre></li>\n<li>生成map映射文件<pre><code>webpack -d\n</code></pre></li>\n<li>使用<code>webpack</code>命令打包时，默认是根据<code>webpcak.config.js</code>配置文件进行打包。有时因为开发需求，可能会配置多个不同的<code>config.js</code>文件进行不同的操作，如：<code>webpack.es6.config.js</code>、<code>webpack.react.config.js</code>，这样在执行操作的时候会添加以下参数：<pre><code>webpack --config webpack.es6.config.js      // 针对es6语法\nwebpack --config webpack.react.config.js    // 针对react\n</code></pre></li>\n</ul>\n<hr>\n<h2 id=\"五、package-json命令配置\"><a href=\"#五、package-json命令配置\" class=\"headerlink\" title=\"五、package.json命令配置\"></a>五、package.json命令配置</h2><ul>\n<li><p>如果在命令行中要输入以下类似命令：</p>\n<pre><code>1）webpack-dev-server --port 3000 --hot --inline\n2）webpack-dev-server --port 3000 --hot --inline --config webpack.es6.config.js\n3）webpack-dev-server --port 3000 --hot --inline --config webpack.react.config.js\n</code></pre><p>每次打包或启动都要输入这么老长的命令，不免觉得过于繁琐，因此可在<code>package.json</code>中的<code>script</code>下配置相关属性值：</p>\n<pre><code>&quot;script&quot;:{\n    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,      // 默认\n    &quot;build&quot;:&quot;webpack-dev-server --port 3000 --hot --inline&quot;,       // 1\n    &quot;build-es6&quot;:&quot;webpack-dev-server --port 3000 --hot --inline --config webpack.es6.config.js&quot;,      // 2\n    &quot;build-react&quot;:&quot;webpack-dev-server --port 3000 --hot --inline --config webpack.react.config.js&quot;      // 3\n}\n</code></pre><p>之后就可以在命令行中输入短小精悍的命令执行相关操作：</p>\n<pre><code>1. npm run build\n2. npm run build-es6\n3. npm run build-react\n</code></pre></li>\n</ul>\n<hr>\n<p><em>提示：</em><code>i</code>是<code>install</code>的简写，推荐使用</p>\n<ul>\n<li>参考文档：</li>\n</ul>\n<ol>\n<li><a href=\"http://webpack.github.io/docs/\">http://webpack.github.io/docs/</a></li>\n<li><a href=\"https://webpack.js.org/\">https://webpack.js.org/</a></li>\n<li><a href=\"http://webpackdoc.com/\">http://webpackdoc.com/</a></li>\n<li><a href=\"http://www.cnblogs.com/haogj/p/5160821.html\">http://www.cnblogs.com/haogj/p/5160821.html</a></li>\n<li><a href=\"http://www.jb51.net/article/96646.htm\">http://www.jb51.net/article/96646.htm</a></li>\n</ol>\n<ul>\n<li>不甚详细，多多包涵 ^-O=O-^</li>\n</ul>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj0s9eigt000bvgb90tkdge6b","tag_id":"cj0s9eigs000avgb9qs91c386","_id":"cj0s9eigw000evgb9whvrt5ir"},{"post_id":"cj0s9eig30001vgb9fjd5nbyl","tag_id":"cj0s9eige0003vgb9fd1auct5","_id":"cj0s9eigx000fvgb9guigamcs"},{"post_id":"cj0s9eig30001vgb9fjd5nbyl","tag_id":"cj0s9eigk0007vgb9jvfl82o0","_id":"cj0s9eigy000gvgb95uzgrq63"},{"post_id":"cj0s9eig30001vgb9fjd5nbyl","tag_id":"cj0s9eigs000avgb9qs91c386","_id":"cj0s9eigz000ivgb9f8f03x8h"},{"post_id":"cj0s9eiga0002vgb9rr7o01h9","tag_id":"cj0s9eigw000dvgb9d86thjsa","_id":"cj0s9eih0000jvgb9kdguyocu"},{"post_id":"cj0s9eigg0004vgb9mwgym8og","tag_id":"cj0s9eigs000avgb9qs91c386","_id":"cj0s9eih1000lvgb9xixabgtn"},{"post_id":"cj0s9eigi0005vgb9npvu4tq4","tag_id":"cj0s9eih0000kvgb9zsbggnl0","_id":"cj0s9eih2000ovgb9ili8g35a"},{"post_id":"cj0s9eigi0005vgb9npvu4tq4","tag_id":"cj0s9eih1000mvgb9gn5m9nj6","_id":"cj0s9eih3000pvgb9cemhk6ch"},{"post_id":"cj0s9eigj0006vgb9q2ic75z7","tag_id":"cj0s9eih2000nvgb9hwg82fmp","_id":"cj0s9eih6000svgb9arlrth3d"},{"post_id":"cj0s9eigj0006vgb9q2ic75z7","tag_id":"cj0s9eigs000avgb9qs91c386","_id":"cj0s9eih6000tvgb9as103cqe"},{"post_id":"cj0s9eigm0008vgb9l0ycddzg","tag_id":"cj0s9eih5000rvgb9iy0mjeyu","_id":"cj0s9eihb000yvgb95o8nsd91"},{"post_id":"cj0s9eigm0008vgb9l0ycddzg","tag_id":"cj0s9eigs000avgb9qs91c386","_id":"cj0s9eihb000zvgb9ueaqk20m"},{"post_id":"cj0s9eigm0008vgb9l0ycddzg","tag_id":"cj0s9eih9000vvgb9ld4gqjjr","_id":"cj0s9eihc0011vgb97rg7sl84"},{"post_id":"cj0s9eigm0008vgb9l0ycddzg","tag_id":"cj0s9eiha000wvgb9zip1iun0","_id":"cj0s9eihd0012vgb9jntc5szc"},{"post_id":"cj0s9eigr0009vgb9g758g34p","tag_id":"cj0s9eiha000xvgb9d2ltrwy9","_id":"cj0s9eihe0014vgb9lrtva8un"},{"post_id":"cj0s9eigr0009vgb9g758g34p","tag_id":"cj0s9eihc0010vgb9le6ysygk","_id":"cj0s9eihf0015vgb99r9hf70f"},{"post_id":"cj0s9eigu000cvgb9t7q5fyfp","tag_id":"cj0s9eihd0013vgb9ah3suyo8","_id":"cj0s9eihg0017vgb9mugfg40g"},{"post_id":"cj0s9eigu000cvgb9t7q5fyfp","tag_id":"cj0s9eigs000avgb9qs91c386","_id":"cj0s9eihg0018vgb997m1vbrf"},{"post_id":"cj0s9eigu000cvgb9t7q5fyfp","tag_id":"cj0s9eihf0016vgb9rm8vw2bz","_id":"cj0s9eihg0019vgb9ubfq43w6"}],"Tag":[{"name":"babel","_id":"cj0s9eige0003vgb9fd1auct5"},{"name":"ES6","_id":"cj0s9eigk0007vgb9jvfl82o0"},{"name":"js","_id":"cj0s9eigs000avgb9qs91c386"},{"name":"html","_id":"cj0s9eigw000dvgb9d86thjsa"},{"name":"mongodb","_id":"cj0s9eih0000kvgb9zsbggnl0"},{"name":"mongoose","_id":"cj0s9eih1000mvgb9gn5m9nj6"},{"name":"update","_id":"cj0s9eih2000nvgb9hwg82fmp"},{"name":"seajs","_id":"cj0s9eih5000rvgb9iy0mjeyu"},{"name":"CMD","_id":"cj0s9eih9000vvgb9ld4gqjjr"},{"name":"模块化","_id":"cj0s9eiha000wvgb9zip1iun0"},{"name":"Markdown","_id":"cj0s9eiha000xvgb9d2ltrwy9"},{"name":"编辑","_id":"cj0s9eihc0010vgb9le6ysygk"},{"name":"webpack","_id":"cj0s9eihd0013vgb9ah3suyo8"},{"name":"前端优化","_id":"cj0s9eihf0016vgb9rm8vw2bz"}]}}